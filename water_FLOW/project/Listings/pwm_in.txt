; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\pwm_in.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\pwm_in.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\main -I..\component\delay -I..\component\LED -I..\component\sys -I..\component\usart -I..\STM32_lib\CORE -I..\STM32_lib\inc -I..\STM32_lib\user_layer -I..\component\KEY -I..\component\lcd_driver -I..\component\gui -I..\component\UI -I..\component\RTC -I..\component\FreeRTOS\Source\include -I..\component\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\component\FreeRTOS -I..\component\FreeRTOS\Source\portable\MemMang -I..\component\FreeRTOS\Source\CMSIS_RTOS -I..\component\STMFLASH -I..\component\PWM_in -IE:\1.项目\1.水流量计\WATER-FLOW\water_FLOW\project\RTE -ID:\1.Software_\5.Keil5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\1.Software_\5.Keil5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -Dwater_flow --omf_browse=..\obj\pwm_in.crf ..\component\PWM_in\pwm_in.c]
                          THUMB

                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM3_IRQHandler PROC
;;;151    /*********************************************************/
;;;152    void TIM3_IRQHandler(void)   //TIM3中断
000000  b510              PUSH     {r4,lr}
;;;153    {
;;;154    	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)  //检查TIM3更新中断发生与否
000002  2101              MOVS     r1,#1
000004  4805              LDR      r0,|L1.28|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b130              CBZ      r0,|L1.26|
;;;155    		{
;;;156    		TIM_ClearITPendingBit(TIM3, TIM_IT_Update  );  //清除TIMx更新中断标志 
00000c  2101              MOVS     r1,#1
00000e  4803              LDR      r0,|L1.28|
000010  f7fffffe          BL       TIM_ClearITPendingBit
;;;157    		printf("timer working !\r\n");
000014  a002              ADR      r0,|L1.32|
000016  f7fffffe          BL       __2printf
                  |L1.26|
;;;158    		}
;;;159    }
00001a  bd10              POP      {r4,pc}
                          ENDP

                  |L1.28|
                          DCD      0x40000400
                  |L1.32|
000020  74696d65          DCB      "timer working !\r\n",0
000024  7220776f
000028  726b696e
00002c  6720210d
000030  0a00    
000032  00                DCB      0
000033  00                DCB      0

                          AREA ||i.TIM3_Int_Init||, CODE, READONLY, ALIGN=2

                  TIM3_Int_Init PROC
;;;124    /*********************************************************/
;;;125    void TIM3_Int_Init(u16 arr,u16 psc)
000000  b57f              PUSH     {r0-r6,lr}
;;;126    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;127      TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;128    	NVIC_InitTypeDef NVIC_InitStructure;
;;;129    
;;;130    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); //时钟使能
000006  2101              MOVS     r1,#1
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;131    	
;;;132    	//定时器TIM3初始化
;;;133    	TIM_TimeBaseStructure.TIM_Period = arr; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值	
00000e  f8ad5008          STRH     r5,[sp,#8]
;;;134    	TIM_TimeBaseStructure.TIM_Prescaler =psc; //设置用来作为TIMx时钟频率除数的预分频值
000012  f8ad4004          STRH     r4,[sp,#4]
;;;135    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; //设置时钟分割:TDTS = Tck_tim
000016  2000              MOVS     r0,#0
000018  f8ad000a          STRH     r0,[sp,#0xa]
;;;136    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
00001c  f8ad0006          STRH     r0,[sp,#6]
;;;137    	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure); //根据指定的参数初始化TIMx的时间基数单位
000020  a901              ADD      r1,sp,#4
000022  480e              LDR      r0,|L2.92|
000024  f7fffffe          BL       TIM_TimeBaseInit
;;;138     
;;;139    	TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE ); //使能指定的TIM3中断,允许更新中断
000028  2201              MOVS     r2,#1
00002a  4611              MOV      r1,r2
00002c  480b              LDR      r0,|L2.92|
00002e  f7fffffe          BL       TIM_ITConfig
;;;140    
;;;141    	//中断优先级NVIC设置
;;;142    	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;  //TIM3中断
000032  201d              MOVS     r0,#0x1d
000034  f88d0000          STRB     r0,[sp,#0]
;;;143    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  //先占优先级0级
000038  2000              MOVS     r0,#0
00003a  f88d0001          STRB     r0,[sp,#1]
;;;144    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;  //从优先级3级
00003e  2003              MOVS     r0,#3
000040  f88d0002          STRB     r0,[sp,#2]
;;;145    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
000044  2001              MOVS     r0,#1
000046  f88d0003          STRB     r0,[sp,#3]
;;;146    	NVIC_Init(&NVIC_InitStructure);  //初始化NVIC寄存器
00004a  4668              MOV      r0,sp
00004c  f7fffffe          BL       NVIC_Init
;;;147    
;;;148    
;;;149    	TIM_Cmd(TIM3, ENABLE);  //使能TIMx					 
000050  2101              MOVS     r1,#1
000052  4802              LDR      r0,|L2.92|
000054  f7fffffe          BL       TIM_Cmd
;;;150    }
000058  bd7f              POP      {r0-r6,pc}
;;;151    /*********************************************************/
                          ENDP

00005a  0000              DCW      0x0000
                  |L2.92|
                          DCD      0x40000400

                          AREA ||i.TIM3_PWM_Init||, CODE, READONLY, ALIGN=2

                  TIM3_PWM_Init PROC
;;;3      TIM_ICInitTypeDef  TIM5_ICInitStructure;
;;;4      void TIM3_PWM_Init(u16 arr,u16 psc)
000000  b530              PUSH     {r4,r5,lr}
;;;5      {  
000002  b089              SUB      sp,sp,#0x24
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;6      	GPIO_InitTypeDef GPIO_InitStructure;
;;;7      	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;8      	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;9      	
;;;10     
;;;11     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
000008  2101              MOVS     r1,#1
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;12      	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB  | RCC_APB2Periph_AFIO, ENABLE);  //使能GPIO外设和AFIO复用功能模块时钟使能
000010  2101              MOVS     r1,#1
000012  2009              MOVS     r0,#9
000014  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;13     	
;;;14        //设置该引脚为复用输出功能,输出TIM3 CH2的PWM脉冲波形
;;;15     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0; //TIM_CH2
000018  2001              MOVS     r0,#1
00001a  f8ad0020          STRH     r0,[sp,#0x20]
;;;16     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  //复用推挽输出
00001e  2018              MOVS     r0,#0x18
000020  f88d0023          STRB     r0,[sp,#0x23]
;;;17     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000024  2003              MOVS     r0,#3
000026  f88d0022          STRB     r0,[sp,#0x22]
;;;18     	GPIO_Init(GPIOB, &GPIO_InitStructure);
00002a  a908              ADD      r1,sp,#0x20
00002c  4816              LDR      r0,|L3.136|
00002e  f7fffffe          BL       GPIO_Init
;;;19     
;;;20     	TIM_TimeBaseStructure.TIM_Period = arr; 
000032  f8ad5018          STRH     r5,[sp,#0x18]
;;;21     	TIM_TimeBaseStructure.TIM_Prescaler =psc; //设置用来作为TIMx时钟频率除数的预分频值  不分频
000036  f8ad4014          STRH     r4,[sp,#0x14]
;;;22     	TIM_TimeBaseStructure.TIM_ClockDivision = 0; //设置时钟分割:TDTS = Tck_tim
00003a  2000              MOVS     r0,#0
00003c  f8ad001a          STRH     r0,[sp,#0x1a]
;;;23     	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
000040  f8ad0016          STRH     r0,[sp,#0x16]
;;;24     	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
000044  a905              ADD      r1,sp,#0x14
000046  4811              LDR      r0,|L3.140|
000048  f7fffffe          BL       TIM_TimeBaseInit
;;;25     	
;;;26     	 
;;;27     	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2; //选择定时器模式:TIM脉冲宽度调制模式2
00004c  2070              MOVS     r0,#0x70
00004e  f8ad0004          STRH     r0,[sp,#4]
;;;28     	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; //比较输出使能
000052  2001              MOVS     r0,#1
000054  f8ad0006          STRH     r0,[sp,#6]
;;;29     	TIM_OCInitStructure.TIM_Pulse = 100; //设置待装入捕获比较寄存器的脉冲值
000058  2064              MOVS     r0,#0x64
00005a  f8ad000a          STRH     r0,[sp,#0xa]
;;;30     	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; //输出极性:TIM输出比较极性高
00005e  2000              MOVS     r0,#0
000060  f8ad000c          STRH     r0,[sp,#0xc]
;;;31     	TIM_OC3Init(TIM3, &TIM_OCInitStructure);  //根据TIM_OCInitStruct中指定的参数初始化外设TIMx
000064  a901              ADD      r1,sp,#4
000066  4809              LDR      r0,|L3.140|
000068  f7fffffe          BL       TIM_OC3Init
;;;32     	TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Enable);  //使能TIMx在CCR2上的预装载寄存器
00006c  2108              MOVS     r1,#8
00006e  4807              LDR      r0,|L3.140|
000070  f7fffffe          BL       TIM_OC3PreloadConfig
;;;33     	
;;;34     	TIM_ARRPreloadConfig(TIM3, ENABLE); //使能TIMx在ARR上的预装载寄存器
000074  2101              MOVS     r1,#1
000076  4805              LDR      r0,|L3.140|
000078  f7fffffe          BL       TIM_ARRPreloadConfig
;;;35     	
;;;36      
;;;37     	TIM_Cmd(TIM3, ENABLE);  //使能TIMx外设
00007c  2101              MOVS     r1,#1
00007e  4803              LDR      r0,|L3.140|
000080  f7fffffe          BL       TIM_Cmd
;;;38      
;;;39     
;;;40     }
000084  b009              ADD      sp,sp,#0x24
000086  bd30              POP      {r4,r5,pc}
;;;41     /*********************************************************
                          ENDP

                  |L3.136|
                          DCD      0x40010c00
                  |L3.140|
                          DCD      0x40000400

                          AREA ||i.TIM5_IN_Init||, CODE, READONLY, ALIGN=2

                  TIM5_IN_Init PROC
;;;43     **********************************************************/
;;;44     void TIM5_IN_Init(u16 arr,u16 psc)
000000  b530              PUSH     {r4,r5,lr}
;;;45     {	 
000002  b085              SUB      sp,sp,#0x14
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;46     	GPIO_InitTypeDef GPIO_InitStructure;
;;;47     	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;48       NVIC_InitTypeDef NVIC_InitStructure;
;;;49     
;;;50     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);	//使能TIM5时钟
000008  2101              MOVS     r1,#1
00000a  2008              MOVS     r0,#8
00000c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;51      	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);  //使能GPIOA时钟
000010  2101              MOVS     r1,#1
000012  2004              MOVS     r0,#4
000014  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;52     	
;;;53     	GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_0;  //PA0 清除之前设置  
000018  2001              MOVS     r0,#1
00001a  f8ad0010          STRH     r0,[sp,#0x10]
;;;54     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD; //PA0 输入  
00001e  2028              MOVS     r0,#0x28
000020  f88d0013          STRB     r0,[sp,#0x13]
;;;55     	GPIO_Init(GPIOA, &GPIO_InitStructure);
000024  a904              ADD      r1,sp,#0x10
000026  481d              LDR      r0,|L4.156|
000028  f7fffffe          BL       GPIO_Init
;;;56     	GPIO_ResetBits(GPIOA,GPIO_Pin_0);						 //PA0 下拉
00002c  2101              MOVS     r1,#1
00002e  481b              LDR      r0,|L4.156|
000030  f7fffffe          BL       GPIO_ResetBits
;;;57     	
;;;58     	//初始化定时器5 TIM5	 
;;;59     	TIM_TimeBaseStructure.TIM_Period = arr; //设定计数器自动重装值 
000034  f8ad5008          STRH     r5,[sp,#8]
;;;60     	TIM_TimeBaseStructure.TIM_Prescaler =psc; 	//预分频器   
000038  f8ad4004          STRH     r4,[sp,#4]
;;;61     	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; //设置时钟分割:TDTS = Tck_tim
00003c  2000              MOVS     r0,#0
00003e  f8ad000a          STRH     r0,[sp,#0xa]
;;;62     	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
000042  f8ad0006          STRH     r0,[sp,#6]
;;;63     	TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
000046  a901              ADD      r1,sp,#4
000048  4815              LDR      r0,|L4.160|
00004a  f7fffffe          BL       TIM_TimeBaseInit
;;;64       
;;;65     	//初始化TIM5输入捕获参数
;;;66     	TIM5_ICInitStructure.TIM_Channel = TIM_Channel_1; //CC1S=01 	选择输入端 IC1映射到TI1上
00004e  2000              MOVS     r0,#0
000050  4914              LDR      r1,|L4.164|
000052  8008              STRH     r0,[r1,#0]
;;;67     	TIM5_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;	//上升沿捕获
000054  8048              STRH     r0,[r1,#2]
;;;68     	TIM5_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI; //映射到TI1上
000056  2001              MOVS     r0,#1
000058  8088              STRH     r0,[r1,#4]
;;;69     	TIM5_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;	 //配置输入分频,不分频 
00005a  2000              MOVS     r0,#0
00005c  80c8              STRH     r0,[r1,#6]
;;;70     	TIM5_ICInitStructure.TIM_ICFilter = 0x00;//IC1F=0000 配置输入滤波器 不滤波
00005e  8108              STRH     r0,[r1,#8]
;;;71     	TIM_ICInit(TIM5, &TIM5_ICInitStructure);
000060  480f              LDR      r0,|L4.160|
000062  f7fffffe          BL       TIM_ICInit
;;;72     	
;;;73     	//中断分组初始化
;;;74     	NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;  //TIM3中断
000066  2032              MOVS     r0,#0x32
000068  f88d0000          STRB     r0,[sp,#0]
;;;75     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 6;  //先占优先级2级
00006c  2006              MOVS     r0,#6
00006e  f88d0001          STRB     r0,[sp,#1]
;;;76     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;  //从优先级0级
000072  2000              MOVS     r0,#0
000074  f88d0002          STRB     r0,[sp,#2]
;;;77     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
000078  2001              MOVS     r0,#1
00007a  f88d0003          STRB     r0,[sp,#3]
;;;78     	NVIC_Init(&NVIC_InitStructure);  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器 
00007e  4668              MOV      r0,sp
000080  f7fffffe          BL       NVIC_Init
;;;79     	
;;;80     	TIM_ITConfig(TIM5,TIM_IT_Update|TIM_IT_CC1,ENABLE);//允许更新中断 ,允许CC1IE捕获中断	
000084  2201              MOVS     r2,#1
000086  2103              MOVS     r1,#3
000088  4805              LDR      r0,|L4.160|
00008a  f7fffffe          BL       TIM_ITConfig
;;;81     	
;;;82      	TIM_Cmd(TIM5,ENABLE ); 	//使能定时器5
00008e  2101              MOVS     r1,#1
000090  4803              LDR      r0,|L4.160|
000092  f7fffffe          BL       TIM_Cmd
;;;83        
;;;84     }
000096  b005              ADD      sp,sp,#0x14
000098  bd30              POP      {r4,r5,pc}
;;;85     /*********************************************************/
                          ENDP

00009a  0000              DCW      0x0000
                  |L4.156|
                          DCD      0x40010800
                  |L4.160|
                          DCD      0x40000c00
                  |L4.164|
                          DCD      TIM5_ICInitStructure

                          AREA ||i.TIM5_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM5_IRQHandler PROC
;;;93     **********************************************************/
;;;94     void TIM5_IRQHandler(void)
000000  491d              LDR      r1,|L5.120|
;;;95     { 		    
;;;96     	u16 tsr;
;;;97     	uint32_t status_value ;
;;;98     //	taskENTER_CRITICAL_FROM_ISR();
;;;99     	
;;;100    	tsr=TIM5->SR;
000002  8808              LDRH     r0,[r1,#0]
;;;101    	if(tsr != 0)
000004  b3a0              CBZ      r0,|L5.112|
;;;102    	{
;;;103    		
;;;104    		if(_flag == 0)
000006  491d              LDR      r1,|L5.124|
000008  7809              LDRB     r1,[r1,#0]  ; _flag
00000a  b999              CBNZ     r1,|L5.52|
;;;105    		{
;;;106    			if(tsr&0X01){f_VAL =65536 + TIM5->CCR1;}
00000c  f0000101          AND      r1,r0,#1
000010  b139              CBZ      r1,|L5.34|
000012  4919              LDR      r1,|L5.120|
000014  3124              ADDS     r1,r1,#0x24
000016  8809              LDRH     r1,[r1,#0]
000018  f5013180          ADD      r1,r1,#0x10000
00001c  4a18              LDR      r2,|L5.128|
00001e  6011              STR      r1,[r2,#0]  ; f_VAL
000020  e004              B        |L5.44|
                  |L5.34|
;;;107    			else {f_VAL = TIM5->CCR1;}
000022  4915              LDR      r1,|L5.120|
000024  3124              ADDS     r1,r1,#0x24
000026  8809              LDRH     r1,[r1,#0]
000028  4a15              LDR      r2,|L5.128|
00002a  6011              STR      r1,[r2,#0]  ; f_VAL
                  |L5.44|
;;;108    			_flag = 1;
00002c  2101              MOVS     r1,#1
00002e  4a13              LDR      r2,|L5.124|
000030  7011              STRB     r1,[r2,#0]
000032  e01d              B        |L5.112|
                  |L5.52|
;;;109    		}
;;;110    		else
;;;111    		{
;;;112    			if(tsr&0X01){s_VAL =65536 + TIM5->CCR1;}
000034  f0000101          AND      r1,r0,#1
000038  b139              CBZ      r1,|L5.74|
00003a  490f              LDR      r1,|L5.120|
00003c  3124              ADDS     r1,r1,#0x24
00003e  8809              LDRH     r1,[r1,#0]
000040  f5013180          ADD      r1,r1,#0x10000
000044  4a0f              LDR      r2,|L5.132|
000046  6011              STR      r1,[r2,#0]  ; s_VAL
000048  e004              B        |L5.84|
                  |L5.74|
;;;113    			else {s_VAL = TIM5->CCR1;}
00004a  490b              LDR      r1,|L5.120|
00004c  3124              ADDS     r1,r1,#0x24
00004e  8809              LDRH     r1,[r1,#0]
000050  4a0c              LDR      r2,|L5.132|
000052  6011              STR      r1,[r2,#0]  ; s_VAL
                  |L5.84|
;;;114    			_flag = 0;
000054  2100              MOVS     r1,#0
000056  4a09              LDR      r2,|L5.124|
000058  7011              STRB     r1,[r2,#0]
;;;115    			_VAL = s_VAL -f_VAL ;
00005a  490a              LDR      r1,|L5.132|
00005c  6809              LDR      r1,[r1,#0]  ; s_VAL
00005e  4a08              LDR      r2,|L5.128|
000060  6812              LDR      r2,[r2,#0]  ; f_VAL
000062  1a89              SUBS     r1,r1,r2
000064  4a08              LDR      r2,|L5.136|
000066  6011              STR      r1,[r2,#0]  ; _VAL
;;;116    			TIM5->CNT=0;
000068  2100              MOVS     r1,#0
00006a  4a03              LDR      r2,|L5.120|
00006c  3214              ADDS     r2,r2,#0x14
00006e  8011              STRH     r1,[r2,#0]
                  |L5.112|
;;;117    		}
;;;118    
;;;119    	}
;;;120    	TIM5->SR=0;//清除中断标志位 
000070  2100              MOVS     r1,#0
000072  4a01              LDR      r2,|L5.120|
000074  8011              STRH     r1,[r2,#0]
;;;121    
;;;122    //	taskEXIT_CRITICAL_FROM_ISR(status_value);	
;;;123    }
000076  4770              BX       lr
;;;124    /*********************************************************/
                          ENDP

                  |L5.120|
                          DCD      0x40000c10
                  |L5.124|
                          DCD      _flag
                  |L5.128|
                          DCD      f_VAL
                  |L5.132|
                          DCD      s_VAL
                  |L5.136|
                          DCD      _VAL

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  TIM5_ICInitStructure
                          %        10

                          AREA ||.data||, DATA, ALIGN=2

                  TIM5CH1_CAPTURE_STA
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  f_VAL
                          DCD      0x00000000
                  s_VAL
                          DCD      0x00000000
                  _VAL
                          DCD      0x00000000
                  _flag
000010  00                DCB      0x00
