; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\port.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\port.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\main -I..\component\delay -I..\component\LED -I..\component\sys -I..\component\usart -I..\STM32_lib\CORE -I..\STM32_lib\inc -I..\STM32_lib\user_layer -I..\component\KEY -I..\component\lcd_driver -I..\component\gui -I..\component\UI -I..\component\RTC -I..\component\FreeRTOS\Source\include -I..\component\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\component\FreeRTOS -I..\component\FreeRTOS\Source\portable\MemMang -I..\component\FreeRTOS\Source\CMSIS_RTOS -I..\component\STMFLASH -I..\component\PWM_in -IE:\1.项目\1.水流量计\WATER-FLOW\water_FLOW\project\RTE -ID:\1.Software_\5.Keil5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\1.Software_\5.Keil5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -Dwater_flow --omf_browse=..\obj\port.crf ..\component\FreeRTOS\Source\portable\RVDS\ARM_CM3\port.c]
                          THUMB

                          AREA ||i.prvTaskExitError||, CODE, READONLY, ALIGN=2

                  prvTaskExitError PROC
;;;235    
;;;236    static void prvTaskExitError( void )
000000  480e              LDR      r0,|L1.60|
;;;237    {
;;;238    	/* A function that implements a task must not exit or attempt to return to
;;;239    	its caller as there is nothing to return to.  If a task wants to exit it
;;;240    	should instead call vTaskDelete( NULL ).
;;;241    
;;;242    	Artificially force an assert() to be triggered if configASSERT() is
;;;243    	defined, then stop here so application writers can catch the error. */
;;;244    	configASSERT( uxCriticalNesting == ~0UL );
000002  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000004  1c40              ADDS     r0,r0,#1
000006  b908              CBNZ     r0,|L1.12|
000008  2001              MOVS     r0,#1
00000a  e000              B        |L1.14|
                  |L1.12|
00000c  2000              MOVS     r0,#0
                  |L1.14|
00000e  b950              CBNZ     r0,|L1.38|
000010  bf00              NOP      
000012  2030              MOVS     r0,#0x30
000014  f3808811          MSR      BASEPRI,r0
000018  f3bf8f4f          DSB      
00001c  f3bf8f6f          ISB      
000020  bf00              NOP      
000022  bf00              NOP      
                  |L1.36|
000024  e7fe              B        |L1.36|
                  |L1.38|
;;;245    	portDISABLE_INTERRUPTS();
000026  bf00              NOP      
000028  2030              MOVS     r0,#0x30
00002a  f3808811          MSR      BASEPRI,r0
00002e  f3bf8f4f          DSB      
000032  f3bf8f6f          ISB      
000036  bf00              NOP      
;;;246    	for( ;; );
000038  bf00              NOP      
                  |L1.58|
00003a  e7fe              B        |L1.58|
;;;247    }
;;;248    /*-----------------------------------------------------------*/
                          ENDP

                  |L1.60|
                          DCD      uxCriticalNesting

                          AREA ||i.pxPortInitialiseStack||, CODE, READONLY, ALIGN=2

                  pxPortInitialiseStack PROC
;;;216     */
;;;217    StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
000000  1f00              SUBS     r0,r0,#4
;;;218    {
;;;219    	/* Simulate the stack frame as it would be created by a context switch
;;;220    	interrupt. */
;;;221    	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
;;;222    	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
000002  f04f7380          MOV      r3,#0x1000000
000006  6003              STR      r3,[r0,#0]
;;;223    	pxTopOfStack--;
000008  1f00              SUBS     r0,r0,#4
;;;224    	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
00000a  f0210301          BIC      r3,r1,#1
00000e  6003              STR      r3,[r0,#0]
;;;225    	pxTopOfStack--;
000010  1f00              SUBS     r0,r0,#4
;;;226    	*pxTopOfStack = ( StackType_t ) prvTaskExitError;	/* LR */
000012  4b03              LDR      r3,|L2.32|
000014  6003              STR      r3,[r0,#0]
;;;227    
;;;228    	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
000016  3814              SUBS     r0,r0,#0x14
;;;229    	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
000018  6002              STR      r2,[r0,#0]
;;;230    	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
00001a  3820              SUBS     r0,r0,#0x20
;;;231    
;;;232    	return pxTopOfStack;
;;;233    }
00001c  4770              BX       lr
;;;234    /*-----------------------------------------------------------*/
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      prvTaskExitError

                          AREA ||i.vPortEndScheduler||, CODE, READONLY, ALIGN=2

                  vPortEndScheduler PROC
;;;357    
;;;358    void vPortEndScheduler( void )
000000  480a              LDR      r0,|L3.44|
;;;359    {
;;;360    	/* Not implemented in ports where there is nothing to return to.
;;;361    	Artificially force an assert. */
;;;362    	configASSERT( uxCriticalNesting == 1000UL );
000002  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000004  f5b07f7a          CMP      r0,#0x3e8
000008  d101              BNE      |L3.14|
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L3.16|
                  |L3.14|
00000e  2000              MOVS     r0,#0
                  |L3.16|
000010  b950              CBNZ     r0,|L3.40|
000012  bf00              NOP      
000014  2030              MOVS     r0,#0x30
000016  f3808811          MSR      BASEPRI,r0
00001a  f3bf8f4f          DSB      
00001e  f3bf8f6f          ISB      
000022  bf00              NOP      
000024  bf00              NOP      
                  |L3.38|
000026  e7fe              B        |L3.38|
                  |L3.40|
;;;363    }
000028  4770              BX       lr
;;;364    /*-----------------------------------------------------------*/
                          ENDP

00002a  0000              DCW      0x0000
                  |L3.44|
                          DCD      uxCriticalNesting

                          AREA ||i.vPortEnterCritical||, CODE, READONLY, ALIGN=2

                  vPortEnterCritical PROC
;;;365    
;;;366    void vPortEnterCritical( void )
000000  bf00              NOP      
000002  2030              MOVS     r0,#0x30
000004  f3808811          MSR      BASEPRI,r0
000008  f3bf8f4f          DSB      
00000c  f3bf8f6f          ISB      
000010  bf00              NOP      
;;;367    {
;;;368    	portDISABLE_INTERRUPTS();
;;;369    	uxCriticalNesting++;
000012  480e              LDR      r0,|L4.76|
000014  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000016  1c40              ADDS     r0,r0,#1
000018  490c              LDR      r1,|L4.76|
00001a  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;370    
;;;371    	/* This is not the interrupt safe version of the enter critical function so
;;;372    	assert() if it is being called from an interrupt context.  Only API
;;;373    	functions that end in "FromISR" can be used in an interrupt.  Only assert if
;;;374    	the critical nesting count is 1 to protect against recursive calls if the
;;;375    	assert function also uses a critical section. */
;;;376    	if( uxCriticalNesting == 1 )
00001c  4608              MOV      r0,r1
00001e  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000020  2801              CMP      r0,#1
000022  d112              BNE      |L4.74|
;;;377    	{
;;;378    		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
000024  480a              LDR      r0,|L4.80|
000026  6800              LDR      r0,[r0,#0]
000028  b2c0              UXTB     r0,r0
00002a  b908              CBNZ     r0,|L4.48|
00002c  2001              MOVS     r0,#1
00002e  e000              B        |L4.50|
                  |L4.48|
000030  2000              MOVS     r0,#0
                  |L4.50|
000032  b950              CBNZ     r0,|L4.74|
000034  bf00              NOP      
000036  2030              MOVS     r0,#0x30
000038  f3808811          MSR      BASEPRI,r0
00003c  f3bf8f4f          DSB      
000040  f3bf8f6f          ISB      
000044  bf00              NOP      
000046  bf00              NOP      
                  |L4.72|
000048  e7fe              B        |L4.72|
                  |L4.74|
;;;379    	}
;;;380    }
00004a  4770              BX       lr
;;;381    /*-----------------------------------------------------------*/
                          ENDP

                  |L4.76|
                          DCD      uxCriticalNesting
                  |L4.80|
                          DCD      0xe000ed04

                          AREA ||i.vPortExitCritical||, CODE, READONLY, ALIGN=2

                  vPortExitCritical PROC
;;;382    
;;;383    void vPortExitCritical( void )
000000  480d              LDR      r0,|L5.56|
;;;384    {
;;;385    	configASSERT( uxCriticalNesting );
000002  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000004  b950              CBNZ     r0,|L5.28|
000006  bf00              NOP      
000008  2030              MOVS     r0,#0x30
00000a  f3808811          MSR      BASEPRI,r0
00000e  f3bf8f4f          DSB      
000012  f3bf8f6f          ISB      
000016  bf00              NOP      
000018  bf00              NOP      
                  |L5.26|
00001a  e7fe              B        |L5.26|
                  |L5.28|
;;;386    	uxCriticalNesting--;
00001c  4806              LDR      r0,|L5.56|
00001e  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000020  1e40              SUBS     r0,r0,#1
000022  4905              LDR      r1,|L5.56|
000024  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;387    	if( uxCriticalNesting == 0 )
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
00002a  b920              CBNZ     r0,|L5.54|
;;;388    	{
;;;389    		portENABLE_INTERRUPTS();
00002c  2000              MOVS     r0,#0
00002e  f3808811          MSR      BASEPRI,r0
000032  bf00              NOP      
000034  bf00              NOP      
                  |L5.54|
;;;390    	}
;;;391    }
000036  4770              BX       lr
;;;392    /*-----------------------------------------------------------*/
                          ENDP

                  |L5.56|
                          DCD      uxCriticalNesting

                          AREA ||i.vPortSetupTimerInterrupt||, CODE, READONLY, ALIGN=2

                  vPortSetupTimerInterrupt PROC
;;;612    
;;;613    	void vPortSetupTimerInterrupt( void )
000000  4806              LDR      r0,|L6.28|
;;;614    	{
;;;615    		/* Calculate the constants required to configure the tick interrupt. */
;;;616    		#if configUSE_TICKLESS_IDLE == 1
;;;617    		{
;;;618    			ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
;;;619    			xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
;;;620    			ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
;;;621    		}
;;;622    		#endif /* configUSE_TICKLESS_IDLE */
;;;623    
;;;624    		/* Configure SysTick to interrupt at the requested rate. */
;;;625    		portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000004  f44f717a          MOV      r1,#0x3e8
000008  fbb0f0f1          UDIV     r0,r0,r1
00000c  1e40              SUBS     r0,r0,#1
00000e  f04f21e0          MOV      r1,#0xe000e000
000012  6148              STR      r0,[r1,#0x14]
;;;626    		portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
000014  2007              MOVS     r0,#7
000016  6108              STR      r0,[r1,#0x10]
;;;627    	}
000018  4770              BX       lr
;;;628    
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      SystemCoreClock

                          AREA ||i.vPortValidateInterruptPriority||, CODE, READONLY, ALIGN=2

                  vPortValidateInterruptPriority PROC
;;;642    
;;;643    	void vPortValidateInterruptPriority( void )
000000  b570              PUSH     {r4-r6,lr}
;;;644    	{
;;;645    	uint32_t ulCurrentInterrupt;
;;;646    	uint8_t ucCurrentPriority;
;;;647    
;;;648    		/* Obtain the number of the currently executing interrupt. */
;;;649    		ulCurrentInterrupt = vPortGetIPSR();
000002  f7fffffe          BL       vPortGetIPSR
000006  4604              MOV      r4,r0
;;;650    
;;;651    		/* Is the interrupt number a user defined interrupt? */
;;;652    		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
000008  2c10              CMP      r4,#0x10
00000a  d316              BCC      |L7.58|
;;;653    		{
;;;654    			/* Look up the interrupt's priority. */
;;;655    			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
00000c  f10420e0          ADD      r0,r4,#0xe000e000
000010  f89053f0          LDRB     r5,[r0,#0x3f0]
;;;656    
;;;657    			/* The following assertion will fail if a service routine (ISR) for
;;;658    			an interrupt that has been assigned a priority above
;;;659    			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
;;;660    			function.  ISR safe FreeRTOS API functions must *only* be called
;;;661    			from interrupts that have been assigned a priority at or below
;;;662    			configMAX_SYSCALL_INTERRUPT_PRIORITY.
;;;663    
;;;664    			Numerically low interrupt priority numbers represent logically high
;;;665    			interrupt priorities, therefore the priority of the interrupt must
;;;666    			be set to a value equal to or numerically *higher* than
;;;667    			configMAX_SYSCALL_INTERRUPT_PRIORITY.
;;;668    
;;;669    			Interrupts that	use the FreeRTOS API must not be left at their
;;;670    			default priority of	zero as that is the highest possible priority,
;;;671    			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
;;;672    			and	therefore also guaranteed to be invalid.
;;;673    
;;;674    			FreeRTOS maintains separate thread and ISR API functions to ensure
;;;675    			interrupt entry is as fast and simple as possible.
;;;676    
;;;677    			The following links provide detailed information:
;;;678    			http://www.freertos.org/RTOS-Cortex-M3-M4.html
;;;679    			http://www.freertos.org/FAQHelp.html */
;;;680    			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
000014  4815              LDR      r0,|L7.108|
000016  7800              LDRB     r0,[r0,#0]  ; ucMaxSysCallPriority
000018  4285              CMP      r5,r0
00001a  db01              BLT      |L7.32|
00001c  2001              MOVS     r0,#1
00001e  e000              B        |L7.34|
                  |L7.32|
000020  2000              MOVS     r0,#0
                  |L7.34|
000022  b950              CBNZ     r0,|L7.58|
000024  bf00              NOP      
000026  2030              MOVS     r0,#0x30
000028  f3808811          MSR      BASEPRI,r0
00002c  f3bf8f4f          DSB      
000030  f3bf8f6f          ISB      
000034  bf00              NOP      
000036  bf00              NOP      
                  |L7.56|
000038  e7fe              B        |L7.56|
                  |L7.58|
;;;681    		}
;;;682    
;;;683    		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
;;;684    		that define each interrupt's priority to be split between bits that
;;;685    		define the interrupt's pre-emption priority bits and bits that define
;;;686    		the interrupt's sub-priority.  For simplicity all bits must be defined
;;;687    		to be pre-emption priority bits.  The following assertion will fail if
;;;688    		this is not the case (if some bits represent a sub-priority).
;;;689    
;;;690    		If the application only uses CMSIS libraries for interrupt
;;;691    		configuration then the correct setting can be achieved on all Cortex-M
;;;692    		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
;;;693    		scheduler.  Note however that some vendor specific peripheral libraries
;;;694    		assume a non-zero priority group setting, in which cases using a value
;;;695    		of zero will result in unpredicable behaviour. */
;;;696    		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
00003a  480d              LDR      r0,|L7.112|
00003c  6800              LDR      r0,[r0,#0]
00003e  f40060e0          AND      r0,r0,#0x700
000042  490c              LDR      r1,|L7.116|
000044  6809              LDR      r1,[r1,#0]  ; ulMaxPRIGROUPValue
000046  4288              CMP      r0,r1
000048  d801              BHI      |L7.78|
00004a  2001              MOVS     r0,#1
00004c  e000              B        |L7.80|
                  |L7.78|
00004e  2000              MOVS     r0,#0
                  |L7.80|
000050  b950              CBNZ     r0,|L7.104|
000052  bf00              NOP      
000054  2030              MOVS     r0,#0x30
000056  f3808811          MSR      BASEPRI,r0
00005a  f3bf8f4f          DSB      
00005e  f3bf8f6f          ISB      
000062  bf00              NOP      
000064  bf00              NOP      
                  |L7.102|
000066  e7fe              B        |L7.102|
                  |L7.104|
;;;697    	}
000068  bd70              POP      {r4-r6,pc}
;;;698    
                          ENDP

00006a  0000              DCW      0x0000
                  |L7.108|
                          DCD      ucMaxSysCallPriority
                  |L7.112|
                          DCD      0xe000ed0c
                  |L7.116|
                          DCD      ulMaxPRIGROUPValue

                          AREA ||i.xPortStartScheduler||, CODE, READONLY, ALIGN=2

                  xPortStartScheduler PROC
;;;292     */
;;;293    BaseType_t xPortStartScheduler( void )
000000  b51c              PUSH     {r2-r4,lr}
;;;294    {
;;;295    	#if( configASSERT_DEFINED == 1 )
;;;296    	{
;;;297    		volatile uint32_t ulOriginalPriority;
;;;298    		volatile uint8_t * const pucFirstUserPriorityRegister = ( uint8_t * ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
000002  4822              LDR      r0,|L8.140|
;;;299    		volatile uint8_t ucMaxPriorityValue;
;;;300    
;;;301    		/* Determine the maximum priority from which ISR safe FreeRTOS API
;;;302    		functions can be called.  ISR safe functions are those that end in
;;;303    		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
;;;304    		ensure interrupt entry is as fast and simple as possible.
;;;305    
;;;306    		Save the interrupt priority value that is about to be clobbered. */
;;;307    		ulOriginalPriority = *pucFirstUserPriorityRegister;
000004  4601              MOV      r1,r0
000006  7809              LDRB     r1,[r1,#0]
000008  9101              STR      r1,[sp,#4]
;;;308    
;;;309    		/* Determine the number of priority bits available.  First write to all
;;;310    		possible bits. */
;;;311    		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
00000a  21ff              MOVS     r1,#0xff
00000c  4602              MOV      r2,r0
00000e  7011              STRB     r1,[r2,#0]
;;;312    
;;;313    		/* Read the value back to see how many bits stuck. */
;;;314    		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
000010  4601              MOV      r1,r0
000012  7809              LDRB     r1,[r1,#0]
000014  9100              STR      r1,[sp,#0]
;;;315    
;;;316    		/* Use the same mask on the maximum system call priority. */
;;;317    		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
000016  f89d1000          LDRB     r1,[sp,#0]
00001a  f0010130          AND      r1,r1,#0x30
00001e  4a1c              LDR      r2,|L8.144|
000020  7011              STRB     r1,[r2,#0]
;;;318    
;;;319    		/* Calculate the maximum acceptable priority group value for the number
;;;320    		of bits read back. */
;;;321    		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
000022  2107              MOVS     r1,#7
000024  4a1b              LDR      r2,|L8.148|
000026  6011              STR      r1,[r2,#0]  ; ulMaxPRIGROUPValue
;;;322    		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
000028  e009              B        |L8.62|
                  |L8.42|
;;;323    		{
;;;324    			ulMaxPRIGROUPValue--;
00002a  491a              LDR      r1,|L8.148|
00002c  6809              LDR      r1,[r1,#0]  ; ulMaxPRIGROUPValue
00002e  1e49              SUBS     r1,r1,#1
000030  4a18              LDR      r2,|L8.148|
000032  6011              STR      r1,[r2,#0]  ; ulMaxPRIGROUPValue
;;;325    			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
000034  f89d1000          LDRB     r1,[sp,#0]
000038  0649              LSLS     r1,r1,#25
00003a  0e09              LSRS     r1,r1,#24
00003c  9100              STR      r1,[sp,#0]
                  |L8.62|
00003e  f89d1000          LDRB     r1,[sp,#0]            ;322
000042  f0010180          AND      r1,r1,#0x80           ;322
000046  2980              CMP      r1,#0x80              ;322
000048  d0ef              BEQ      |L8.42|
;;;326    		}
;;;327    
;;;328    		/* Shift the priority group value back to its position within the AIRCR
;;;329    		register. */
;;;330    		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
00004a  4912              LDR      r1,|L8.148|
00004c  6809              LDR      r1,[r1,#0]  ; ulMaxPRIGROUPValue
00004e  0209              LSLS     r1,r1,#8
000050  4a10              LDR      r2,|L8.148|
000052  6011              STR      r1,[r2,#0]  ; ulMaxPRIGROUPValue
;;;331    		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
000054  4611              MOV      r1,r2
000056  8809              LDRH     r1,[r1,#0]  ; ulMaxPRIGROUPValue
000058  f40161e0          AND      r1,r1,#0x700
00005c  6011              STR      r1,[r2,#0]  ; ulMaxPRIGROUPValue
;;;332    
;;;333    		/* Restore the clobbered interrupt priority register to its original
;;;334    		value. */
;;;335    		*pucFirstUserPriorityRegister = ulOriginalPriority;
00005e  4a0b              LDR      r2,|L8.140|
000060  9901              LDR      r1,[sp,#4]
000062  7011              STRB     r1,[r2,#0]
;;;336    	}
;;;337    	#endif /* conifgASSERT_DEFINED */
;;;338    
;;;339    	/* Make PendSV and SysTick the lowest priority interrupts. */
;;;340    	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
000064  480c              LDR      r0,|L8.152|
000066  6800              LDR      r0,[r0,#0]
000068  f4400070          ORR      r0,r0,#0xf00000
00006c  490a              LDR      r1,|L8.152|
00006e  6008              STR      r0,[r1,#0]
;;;341    	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
000070  4608              MOV      r0,r1
000072  6800              LDR      r0,[r0,#0]
000074  f0404070          ORR      r0,r0,#0xf0000000
000078  6008              STR      r0,[r1,#0]
;;;342    
;;;343    	/* Start the timer that generates the tick ISR.  Interrupts are disabled
;;;344    	here already. */
;;;345    	vPortSetupTimerInterrupt();
00007a  f7fffffe          BL       vPortSetupTimerInterrupt
;;;346    
;;;347    	/* Initialise the critical nesting count ready for the first task. */
;;;348    	uxCriticalNesting = 0;
00007e  2000              MOVS     r0,#0
000080  4906              LDR      r1,|L8.156|
000082  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;349    
;;;350    	/* Start the first task. */
;;;351    	prvStartFirstTask();
000084  f7fffffe          BL       __asm___6_port_c_39a90d8d__prvStartFirstTask
;;;352    
;;;353    	/* Should not get here! */
;;;354    	return 0;
000088  2000              MOVS     r0,#0
;;;355    }
00008a  bd1c              POP      {r2-r4,pc}
;;;356    /*-----------------------------------------------------------*/
                          ENDP

                  |L8.140|
                          DCD      0xe000e400
                  |L8.144|
                          DCD      ucMaxSysCallPriority
                  |L8.148|
                          DCD      ulMaxPRIGROUPValue
                  |L8.152|
                          DCD      0xe000ed20
                  |L8.156|
                          DCD      uxCriticalNesting

                          AREA ||i.xPortSysTickHandler||, CODE, READONLY, ALIGN=2

                  xPortSysTickHandler PROC
;;;430    
;;;431    void xPortSysTickHandler( void )
000000  b510              PUSH     {r4,lr}
;;;432    {
;;;433    	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
;;;434    	executes all interrupts must be unmasked.  There is therefore no need to
;;;435    	save and then restore the interrupt mask value as its value is already
;;;436    	known - therefore the slightly faster vPortRaiseBASEPRI() function is used
;;;437    	in place of portSET_INTERRUPT_MASK_FROM_ISR(). */
;;;438    	vPortRaiseBASEPRI();
000002  bf00              NOP      
000004  2030              MOVS     r0,#0x30
000006  f3808811          MSR      BASEPRI,r0
00000a  f3bf8f4f          DSB      
00000e  f3bf8f6f          ISB      
000012  bf00              NOP      
;;;439    	{
;;;440    		/* Increment the RTOS tick. */
;;;441    		if( xTaskIncrementTick() != pdFALSE )
000014  f7fffffe          BL       xTaskIncrementTick
000018  b118              CBZ      r0,|L9.34|
;;;442    		{
;;;443    			/* A context switch is required.  Context switching is performed in
;;;444    			the PendSV interrupt.  Pend the PendSV interrupt. */
;;;445    			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
00001a  f04f5080          MOV      r0,#0x10000000
00001e  4904              LDR      r1,|L9.48|
000020  6008              STR      r0,[r1,#0]
                  |L9.34|
;;;446    		}
;;;447    	}
;;;448    	vPortClearBASEPRIFromISR();
000022  bf00              NOP      
000024  2000              MOVS     r0,#0
000026  f3808811          MSR      BASEPRI,r0
00002a  bf00              NOP      
;;;449    }
00002c  bd10              POP      {r4,pc}
;;;450    /*-----------------------------------------------------------*/
                          ENDP

00002e  0000              DCW      0x0000
                  |L9.48|
                          DCD      0xe000ed04

                          AREA ||.data||, DATA, ALIGN=2

                  uxCriticalNesting
                          DCD      0xaaaaaaaa
                  ucMaxSysCallPriority
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  ulMaxPRIGROUPValue
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\component\\FreeRTOS\\Source\\portable\\RVDS\\ARM_CM3\\port.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |SVC_Handler|
#line 250
|SVC_Handler| PROC
#line 251

 PRESERVE8

 ldr r3, =pxCurrentTCB  
 ldr r1, [r3]  
 ldr r0, [r1]  
 ldmia r0!, {r4-r11}  
 msr psp, r0  
 isb
 mov r0, #0
 msr basepri, r0
 orr r14, #0xd
 bx r14
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_port_c_39a90d8d__prvStartFirstTask|
#line 267
|__asm___6_port_c_39a90d8d__prvStartFirstTask| PROC
#line 268

 PRESERVE8

 
 ldr r0, =0xE000ED08
 ldr r0, [r0]
 ldr r0, [r0]

 
 msr msp, r0
 
 cpsie i
 cpsie f
 dsb
 isb
 
 svc 0
 nop
 nop
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |PendSV_Handler|
#line 394
|PendSV_Handler| PROC
#line 395

 extern uxCriticalNesting
 extern pxCurrentTCB
 extern vTaskSwitchContext

 PRESERVE8

 mrs r0, psp
 isb

 ldr r3, =pxCurrentTCB  
 ldr r2, [r3]

 stmdb r0!, {r4-r11}  
 str r0, [r2]  

 stmdb sp!, {r3, r14}
 mov r0, #( 3 << (8 - 4) )
 msr basepri, r0
 dsb
 isb
 bl vTaskSwitchContext
 mov r0, #0
 msr basepri, r0
 ldmia sp!, {r3, r14}

 ldr r1, [r3]
 ldr r0, [r1]  
 ldmia r0!, {r4-r11}  
 msr psp, r0
 isb
 bx r14
 nop
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |vPortGetIPSR|
#line 632
|vPortGetIPSR| PROC
#line 633

 PRESERVE8

 mrs r0, ipsr
 bx r14
	ENDP

;*** End   embedded assembler ***
