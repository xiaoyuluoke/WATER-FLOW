; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\stmflash.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\stmflash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\main -I..\component\delay -I..\component\LED -I..\component\sys -I..\component\usart -I..\STM32_lib\CORE -I..\STM32_lib\inc -I..\STM32_lib\user_layer -I..\component\KEY -I..\component\lcd_driver -I..\component\gui -I..\component\UI -I..\component\RTC -I..\component\FreeRTOS\Source\include -I..\component\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\component\FreeRTOS -I..\component\FreeRTOS\Source\portable\MemMang -I..\component\FreeRTOS\Source\CMSIS_RTOS -I..\component\STMFLASH -I..\component\PWM_in -IE:\1.项目\1.水流量计\water_FLOW\project\RTE -ID:\1.Software_\5.Keil5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\1.Software_\5.Keil5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -Dwater_flow --omf_browse=..\obj\stmflash.crf ..\component\STMFLASH\stmflash.c]
                          THUMB

                          AREA ||i.STMFLASH_Read||, CODE, READONLY, ALIGN=1

                  STMFLASH_Read PROC
;;;98     //NumToWrite:半字(16位)数
;;;99     void STMFLASH_Read(u32 ReadAddr,u16 *pBuffer,u16 NumToRead)   	
000000  b530              PUSH     {r4,r5,lr}
;;;100    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;101    	u16 i;
;;;102    	for(i=0;i<NumToRead;i++)
000008  2200              MOVS     r2,#0
00000a  e007              B        |L1.28|
                  |L1.12|
;;;103    	{
;;;104    		pBuffer[i]=STMFLASH_ReadHalfWord(ReadAddr);//读取2个字节.
00000c  4618              MOV      r0,r3
00000e  f7fffffe          BL       STMFLASH_ReadHalfWord
000012  f8240012          STRH     r0,[r4,r2,LSL #1]
;;;105    		ReadAddr+=2;//偏移2个字节.	
000016  1c9b              ADDS     r3,r3,#2
000018  1c50              ADDS     r0,r2,#1              ;102
00001a  b282              UXTH     r2,r0                 ;102
                  |L1.28|
00001c  42aa              CMP      r2,r5                 ;102
00001e  dbf5              BLT      |L1.12|
;;;106    	}
;;;107    }
000020  bd30              POP      {r4,r5,pc}
;;;108    
                          ENDP


                          AREA ||i.STMFLASH_ReadHalfWord||, CODE, READONLY, ALIGN=1

                  STMFLASH_ReadHalfWord PROC
;;;20     //返回值:对应数据.
;;;21     u16 STMFLASH_ReadHalfWord(u32 faddr)
000000  4601              MOV      r1,r0
;;;22     {
;;;23     	return *(vu16*)faddr; 
000002  8808              LDRH     r0,[r1,#0]
;;;24     }
000004  4770              BX       lr
;;;25     #if STM32_FLASH_WREN	//如果使能了写   
                          ENDP


                          AREA ||i.STMFLASH_Write||, CODE, READONLY, ALIGN=2

                  STMFLASH_Write PROC
;;;48     u16 STMFLASH_BUF[STM_SECTOR_SIZE/2];//最多是2K字节
;;;49     void STMFLASH_Write(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite)	
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;50     {
000004  4680              MOV      r8,r0
000006  468a              MOV      r10,r1
000008  4617              MOV      r7,r2
;;;51     	u32 secpos;	   //扇区地址
;;;52     	u16 secoff;	   //扇区内偏移地址(16位字计算)
;;;53     	u16 secremain; //扇区内剩余地址(16位字计算)	   
;;;54      	u16 i;    
;;;55     	u32 offaddr;   //去掉0X08000000后的地址
;;;56     	if(WriteAddr<STM32_FLASH_BASE||(WriteAddr>=(STM32_FLASH_BASE+1024*STM32_FLASH_SIZE)))return;//非法地址
00000a  f1b86f00          CMP      r8,#0x8000000
00000e  d302              BCC      |L3.22|
000010  4833              LDR      r0,|L3.224|
000012  4580              CMP      r8,r0
000014  d301              BCC      |L3.26|
                  |L3.22|
;;;57     	FLASH_Unlock();						//解锁
;;;58     	offaddr=WriteAddr-STM32_FLASH_BASE;		//实际偏移地址.
;;;59     	secpos=offaddr/STM_SECTOR_SIZE;			//扇区地址  0~127 for STM32F103RBT6
;;;60     	secoff=(offaddr%STM_SECTOR_SIZE)/2;		//在扇区内的偏移(2个字节为基本单位.)
;;;61     	secremain=STM_SECTOR_SIZE/2-secoff;		//扇区剩余空间大小   
;;;62     	if(NumToWrite<=secremain)secremain=NumToWrite;//不大于该扇区范围
;;;63     	while(1) 
;;;64     	{	
;;;65     		STMFLASH_Read(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);//读出整个扇区的内容
;;;66     		for(i=0;i<secremain;i++)//校验数据
;;;67     		{
;;;68     			if(STMFLASH_BUF[secoff+i]!=0XFFFF)break;//需要擦除  	  
;;;69     		}
;;;70     		if(i<secremain)//需要擦除
;;;71     		{
;;;72     			FLASH_ErasePage(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE);//擦除这个扇区
;;;73     			for(i=0;i<secremain;i++)//复制
;;;74     			{
;;;75     				STMFLASH_BUF[i+secoff]=pBuffer[i];	  
;;;76     			}
;;;77     			STMFLASH_Write_NoCheck(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);//写入整个扇区  
;;;78     		}else STMFLASH_Write_NoCheck(WriteAddr,pBuffer,secremain);//写已经擦除了的,直接写入扇区剩余区间. 				   
;;;79     		if(NumToWrite==secremain)break;//写入结束了
;;;80     		else//写入未结束
;;;81     		{
;;;82     			secpos++;				//扇区地址增1
;;;83     			secoff=0;				//偏移位置为0 	 
;;;84     		   	pBuffer+=secremain;  	//指针偏移
;;;85     			WriteAddr+=secremain;	//写地址偏移	   
;;;86     		   	NumToWrite-=secremain;	//字节(16位)数递减
;;;87     			if(NumToWrite>(STM_SECTOR_SIZE/2))secremain=STM_SECTOR_SIZE/2;//下一个扇区还是写不完
;;;88     			else secremain=NumToWrite;//下一个扇区可以写完了
;;;89     		}	 
;;;90     	};	
;;;91     	FLASH_Lock();//上锁
;;;92     }
000016  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.26|
00001a  f7fffffe          BL       FLASH_Unlock
00001e  f1a86b00          SUB      r11,r8,#0x8000000     ;58
000022  ea4f25db          LSR      r5,r11,#11            ;59
000026  f3cb0949          UBFX     r9,r11,#1,#10         ;60
00002a  f5c96480          RSB      r4,r9,#0x400          ;61
00002e  42a7              CMP      r7,r4                 ;62
000030  dc00              BGT      |L3.52|
000032  463c              MOV      r4,r7                 ;62
                  |L3.52|
000034  e04d              B        |L3.210|
                  |L3.54|
000036  f04f6100          MOV      r1,#0x8000000         ;65
00003a  eb0120c5          ADD      r0,r1,r5,LSL #11      ;65
00003e  144a              ASRS     r2,r1,#17             ;65
000040  4928              LDR      r1,|L3.228|
000042  f7fffffe          BL       STMFLASH_Read
000046  2600              MOVS     r6,#0                 ;66
000048  e00b              B        |L3.98|
                  |L3.74|
00004a  eb090006          ADD      r0,r9,r6              ;68
00004e  4925              LDR      r1,|L3.228|
000050  f8310010          LDRH     r0,[r1,r0,LSL #1]     ;68
000054  f64f71ff          MOV      r1,#0xffff            ;68
000058  4288              CMP      r0,r1                 ;68
00005a  d000              BEQ      |L3.94|
00005c  e003              B        |L3.102|
                  |L3.94|
00005e  1c70              ADDS     r0,r6,#1              ;66
000060  b286              UXTH     r6,r0                 ;66
                  |L3.98|
000062  42a6              CMP      r6,r4                 ;66
000064  dbf1              BLT      |L3.74|
                  |L3.102|
000066  bf00              NOP                            ;68
000068  42a6              CMP      r6,r4                 ;70
00006a  da1b              BGE      |L3.164|
00006c  f04f6100          MOV      r1,#0x8000000         ;72
000070  eb0120c5          ADD      r0,r1,r5,LSL #11      ;72
000074  f7fffffe          BL       FLASH_ErasePage
000078  2600              MOVS     r6,#0                 ;73
00007a  e008              B        |L3.142|
                  |L3.124|
00007c  f83a0016          LDRH     r0,[r10,r6,LSL #1]    ;75
000080  eb060109          ADD      r1,r6,r9              ;75
000084  4a17              LDR      r2,|L3.228|
000086  f8220011          STRH     r0,[r2,r1,LSL #1]     ;75
00008a  1c70              ADDS     r0,r6,#1              ;73
00008c  b286              UXTH     r6,r0                 ;73
                  |L3.142|
00008e  42a6              CMP      r6,r4                 ;73
000090  dbf4              BLT      |L3.124|
000092  f04f6100          MOV      r1,#0x8000000         ;77
000096  eb0120c5          ADD      r0,r1,r5,LSL #11      ;77
00009a  144a              ASRS     r2,r1,#17             ;77
00009c  4911              LDR      r1,|L3.228|
00009e  f7fffffe          BL       STMFLASH_Write_NoCheck
0000a2  e004              B        |L3.174|
                  |L3.164|
0000a4  4622              MOV      r2,r4                 ;78
0000a6  4651              MOV      r1,r10                ;78
0000a8  4640              MOV      r0,r8                 ;78
0000aa  f7fffffe          BL       STMFLASH_Write_NoCheck
                  |L3.174|
0000ae  42a7              CMP      r7,r4                 ;79
0000b0  d100              BNE      |L3.180|
0000b2  e00f              B        |L3.212|
                  |L3.180|
0000b4  1c6d              ADDS     r5,r5,#1              ;82
0000b6  f04f0900          MOV      r9,#0                 ;83
0000ba  eb0a0a44          ADD      r10,r10,r4,LSL #1     ;84
0000be  44a0              ADD      r8,r8,r4              ;85
0000c0  1b38              SUBS     r0,r7,r4              ;86
0000c2  b287              UXTH     r7,r0                 ;86
0000c4  f5b76f80          CMP      r7,#0x400             ;87
0000c8  dd02              BLE      |L3.208|
0000ca  f44f6480          MOV      r4,#0x400             ;87
0000ce  e000              B        |L3.210|
                  |L3.208|
0000d0  463c              MOV      r4,r7                 ;88
                  |L3.210|
0000d2  e7b0              B        |L3.54|
                  |L3.212|
0000d4  bf00              NOP                            ;79
0000d6  f7fffffe          BL       FLASH_Lock
0000da  bf00              NOP      
0000dc  e79b              B        |L3.22|
;;;93     #endif
                          ENDP

0000de  0000              DCW      0x0000
                  |L3.224|
                          DCD      0x08080000
                  |L3.228|
                          DCD      STMFLASH_BUF

                          AREA ||i.STMFLASH_Write_NoCheck||, CODE, READONLY, ALIGN=1

                  STMFLASH_Write_NoCheck PROC
;;;29     //NumToWrite:半字(16位)数   
;;;30     void STMFLASH_Write_NoCheck(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite)   
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;31     { 			 		 
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;32     	u16 i;
;;;33     	for(i=0;i<NumToWrite;i++)
00000a  2400              MOVS     r4,#0
00000c  e007              B        |L4.30|
                  |L4.14|
;;;34     	{
;;;35     		FLASH_ProgramHalfWord(WriteAddr,pBuffer[i]);
00000e  f8361014          LDRH     r1,[r6,r4,LSL #1]
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       FLASH_ProgramHalfWord
;;;36     	    WriteAddr+=2;//地址增加2.
000018  1cad              ADDS     r5,r5,#2
00001a  1c60              ADDS     r0,r4,#1              ;33
00001c  b284              UXTH     r4,r0                 ;33
                  |L4.30|
00001e  42bc              CMP      r4,r7                 ;33
000020  dbf5              BLT      |L4.14|
;;;37     	}  
;;;38     } 
000022  e8bd81f0          POP      {r4-r8,pc}
;;;39     //从指定地址开始写入指定长度的数据
                          ENDP


                          AREA ||i.Test_Write||, CODE, READONLY, ALIGN=1

                  Test_Write PROC
;;;111    //WriteData:要写入的数据
;;;112    void Test_Write(u32 WriteAddr,u16 WriteData)   	
000000  b513              PUSH     {r0,r1,r4,lr}
;;;113    {
000002  4604              MOV      r4,r0
;;;114    	STMFLASH_Write(WriteAddr,&WriteData,1);//写入一个字 
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       STMFLASH_Write
;;;115    }
00000e  bd1c              POP      {r2-r4,pc}
;;;116    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  STMFLASH_BUF
                          %        2048
