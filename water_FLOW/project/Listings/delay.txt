; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\delay.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\delay.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\main -I..\component\delay -I..\component\LED -I..\component\sys -I..\component\usart -I..\STM32_lib\CORE -I..\STM32_lib\inc -I..\STM32_lib\user_layer -I..\component\KEY -I..\component\lcd_driver -I..\component\gui -I..\component\UI -I..\component\RTC -I..\component\FreeRTOS\Source\include -I..\component\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\component\FreeRTOS -I..\component\FreeRTOS\Source\portable\MemMang -I..\component\FreeRTOS\Source\CMSIS_RTOS -I..\component\STMFLASH -I..\component\PWM_in -IE:\1.项目\1.水流量计\WATER-FLOW\water_FLOW\project\RTE -ID:\1.Software_\5.Keil5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\1.Software_\5.Keil5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -Dwater_flow --omf_browse=..\obj\delay.crf ..\component\delay\delay.c]
                          THUMB

                          AREA ||i.delay_init||, CODE, READONLY, ALIGN=2

                  delay_init PROC
;;;126    //SYSCLK:系统时钟
;;;127    void delay_init()
000000  b510              PUSH     {r4,lr}
;;;128    {
;;;129    #if SYSTEM_SUPPORT_OS  							//如果需要支持OS.
;;;130    	u32 reload;
;;;131    #endif
;;;132    	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);	//选择外部时钟  HCLK/8
000002  f06f0004          MVN      r0,#4
000006  f7fffffe          BL       SysTick_CLKSourceConfig
;;;133    	fac_us=SystemCoreClock/8000000;				//为系统时钟的1/8  
00000a  4810              LDR      r0,|L1.76|
00000c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000e  4910              LDR      r1,|L1.80|
000010  fbb0f0f1          UDIV     r0,r0,r1
000014  490f              LDR      r1,|L1.84|
000016  7008              STRB     r0,[r1,#0]
;;;134    #if SYSTEM_SUPPORT_OS  							//如果需要支持OS.
;;;135    	reload=SystemCoreClock/8000000;				//每秒钟的计数次数 单位为M  
000018  480c              LDR      r0,|L1.76|
00001a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00001c  490c              LDR      r1,|L1.80|
00001e  fbb0f4f1          UDIV     r4,r0,r1
;;;136    	reload*=1000000/configTICK_RATE_HZ;		//根据delay_ostickspersec设定溢出时间
000022  f44f707a          MOV      r0,#0x3e8
000026  4344              MULS     r4,r0,r4
;;;137    												//reload为24位寄存器,最大值:16777216,在72M下,约合1.86s左右	
;;;138    	fac_ms=1000/configTICK_RATE_HZ;			//代表OS可以延时的最少单位	   
000028  2001              MOVS     r0,#1
00002a  490b              LDR      r1,|L1.88|
00002c  8008              STRH     r0,[r1,#0]
;;;139    
;;;140    	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   	//开启SYSTICK中断
00002e  f04f20e0          MOV      r0,#0xe000e000
000032  6900              LDR      r0,[r0,#0x10]
000034  f0400002          ORR      r0,r0,#2
000038  f04f21e0          MOV      r1,#0xe000e000
00003c  6108              STR      r0,[r1,#0x10]
;;;141    	SysTick->LOAD=reload; 						//每1/delay_ostickspersec秒中断一次	
00003e  4608              MOV      r0,r1
000040  6144              STR      r4,[r0,#0x14]
;;;142    	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;   	//开启SYSTICK    
000042  6900              LDR      r0,[r0,#0x10]
000044  f0400001          ORR      r0,r0,#1
000048  6108              STR      r0,[r1,#0x10]
;;;143    
;;;144    #else
;;;145    	fac_ms=(u16)fac_us*1000;					//非OS下,代表每个ms需要的systick时钟数   
;;;146    #endif
;;;147    }								    
00004a  bd10              POP      {r4,pc}
;;;148    
                          ENDP

                  |L1.76|
                          DCD      SystemCoreClock
                  |L1.80|
                          DCD      0x007a1200
                  |L1.84|
                          DCD      fac_us
                  |L1.88|
                          DCD      fac_ms

                          AREA ||i.delay_ms||, CODE, READONLY, ALIGN=2

                  delay_ms PROC
;;;175    //nms:要延时的ms数
;;;176    void delay_ms(u16 nms)
000000  b570              PUSH     {r4-r6,lr}
;;;177    {	
000002  4604              MOV      r4,r0
;;;178    	if(xTaskGetSchedulerState()!=taskSCHEDULER_NOT_STARTED)	//如果OS已经在跑了,并且不是在中断里面(中断里面不能任务调度)	    
000004  f7fffffe          BL       xTaskGetSchedulerState
000008  2801              CMP      r0,#1
00000a  d011              BEQ      |L2.48|
;;;179    	{		 
;;;180    		if(nms>=fac_ms)							//延时的时间大于OS的最少时间周期 
00000c  480c              LDR      r0,|L2.64|
00000e  8800              LDRH     r0,[r0,#0]  ; fac_ms
000010  4284              CMP      r4,r0
000012  db06              BLT      |L2.34|
;;;181    		{ 
;;;182       			vTaskDelay(nms/fac_ms);
000014  480a              LDR      r0,|L2.64|
000016  8800              LDRH     r0,[r0,#0]  ; fac_ms
000018  fb94f5f0          SDIV     r5,r4,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       vTaskDelay
                  |L2.34|
;;;183    		}
;;;184    		nms%=fac_ms;							//OS已经无法提供这么小的延时了,采用普通方式延时    
000022  4807              LDR      r0,|L2.64|
000024  8800              LDRH     r0,[r0,#0]  ; fac_ms
000026  fb94f1f0          SDIV     r1,r4,r0
00002a  fb004011          MLS      r0,r0,r1,r4
00002e  b284              UXTH     r4,r0
                  |L2.48|
;;;185    	}
;;;186    	delay_us((u32)(nms*1000));					//普通方式延时  
000030  f44f717a          MOV      r1,#0x3e8
000034  fb04f001          MUL      r0,r4,r1
000038  f7fffffe          BL       delay_us
;;;187    }
00003c  bd70              POP      {r4-r6,pc}
;;;188    #else //不用OS时
                          ENDP

00003e  0000              DCW      0x0000
                  |L2.64|
                          DCD      fac_ms

                          AREA ||i.delay_us||, CODE, READONLY, ALIGN=2

                  delay_us PROC
;;;151    //nus为要延时的us数.		    								   
;;;152    void delay_us(u32 nus)
000000  b570              PUSH     {r4-r6,lr}
;;;153    {		
000002  4603              MOV      r3,r0
;;;154    	u32 ticks;
;;;155    	u32 told,tnow,tcnt=0;
000004  2200              MOVS     r2,#0
;;;156    	u32 reload=SysTick->LOAD;					//LOAD的值	    	 
000006  f04f26e0          MOV      r6,#0xe000e000
00000a  6975              LDR      r5,[r6,#0x14]
;;;157    	ticks=nus*fac_us; 							//需要的节拍数	  		 
00000c  4e0e              LDR      r6,|L3.72|
00000e  7836              LDRB     r6,[r6,#0]  ; fac_us
000010  fb03f406          MUL      r4,r3,r6
;;;158    	tcnt=0;
000014  bf00              NOP      
;;;159    //	delay_osschedlock();						//阻止OS调度，防止打断us延时
;;;160    	told=SysTick->VAL;        					//刚进入时的计数器值
000016  f04f26e0          MOV      r6,#0xe000e000
00001a  69b1              LDR      r1,[r6,#0x18]
;;;161    	while(1)
00001c  e010              B        |L3.64|
                  |L3.30|
;;;162    	{
;;;163    		tnow=SysTick->VAL;	
00001e  f04f26e0          MOV      r6,#0xe000e000
000022  69b0              LDR      r0,[r6,#0x18]
;;;164    		if(tnow!=told)
000024  4288              CMP      r0,r1
000026  d00b              BEQ      |L3.64|
;;;165    		{	    
;;;166    			if(tnow<told)tcnt+=told-tnow;		//这里注意一下SYSTICK是一个递减的计数器就可以了.
000028  4288              CMP      r0,r1
00002a  d202              BCS      |L3.50|
00002c  1a0e              SUBS     r6,r1,r0
00002e  4432              ADD      r2,r2,r6
000030  e002              B        |L3.56|
                  |L3.50|
;;;167    			else tcnt+=reload-tnow+told;	    
000032  1a2e              SUBS     r6,r5,r0
000034  440e              ADD      r6,r6,r1
000036  4432              ADD      r2,r2,r6
                  |L3.56|
;;;168    			told=tnow;
000038  4601              MOV      r1,r0
;;;169    			if(tcnt>=ticks)break;				//时间超过/等于要延迟的时间,则退出.
00003a  42a2              CMP      r2,r4
00003c  d300              BCC      |L3.64|
00003e  e000              B        |L3.66|
                  |L3.64|
000040  e7ed              B        |L3.30|
                  |L3.66|
000042  bf00              NOP      
;;;170    		}  
;;;171    	};
;;;172    //	delay_osschedunlock();						//恢复OS调度									    
;;;173    }
000044  bd70              POP      {r4-r6,pc}
;;;174    //延时nms
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      fac_us

                          AREA ||.data||, DATA, ALIGN=1

                  fac_us
000000  0000              DCB      0x00,0x00
                  fac_ms
000002  0000              DCW      0x0000
