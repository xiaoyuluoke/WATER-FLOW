; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\lcd_driver.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\lcd_driver.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\main -I..\component\delay -I..\component\LED -I..\component\sys -I..\component\usart -I..\STM32_lib\CORE -I..\STM32_lib\inc -I..\STM32_lib\user_layer -I..\component\KEY -I..\component\lcd_driver -I..\component\gui -I..\component\UI -I..\component\RTC -I..\component\FreeRTOS\Source\include -I..\component\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\component\FreeRTOS -I..\component\FreeRTOS\Source\portable\MemMang -I..\component\FreeRTOS\Source\CMSIS_RTOS -I..\component\STMFLASH -I..\component\PWM_in -IE:\1.项目\1.水流量计\WATER-FLOW\water_FLOW\project\RTE -ID:\1.Software_\5.Keil5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\1.Software_\5.Keil5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -Dwater_flow --omf_browse=..\obj\lcd_driver.crf ..\component\lcd_driver\Lcd_Driver.c]
                          THUMB

                          AREA ||i.Gui_DrawPoint||, CODE, READONLY, ALIGN=1

                  Gui_DrawPoint PROC
;;;368    *************************************************/
;;;369    void Gui_DrawPoint(u16 x,u16 y,u16 Data)
000000  b570              PUSH     {r4-r6,lr}
;;;370    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;371    	Lcd_SetXY(x,y);
000008  4631              MOV      r1,r6
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       Lcd_SetXY
;;;372    	Lcd_WriteData_16Bit(Data);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       Lcd_WriteData_16Bit
;;;373    
;;;374    }    
000016  bd70              POP      {r4-r6,pc}
;;;375    
                          ENDP


                          AREA ||i.LCD_GPIO_Init||, CODE, READONLY, ALIGN=2

                  LCD_GPIO_Init PROC
;;;47     ****************************************************************************/
;;;48     void LCD_GPIO_Init(void)
000000  b508              PUSH     {r3,lr}
;;;49     {
;;;50     
;;;51     	GPIO_InitTypeDef  GPIO_InitStructure;
;;;52     	      
;;;53     	RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOB ,ENABLE);
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;54     	
;;;55     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9| GPIO_Pin_10| GPIO_Pin_11| GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14| GPIO_Pin_15;
00000a  f44f407e          MOV      r0,#0xfe00
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;56     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000012  2003              MOVS     r0,#3
000014  f88d0002          STRB     r0,[sp,#2]
;;;57     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000018  2010              MOVS     r0,#0x10
00001a  f88d0003          STRB     r0,[sp,#3]
;;;58     	GPIO_Init(GPIOB, &GPIO_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L2.40|
000022  f7fffffe          BL       GPIO_Init
;;;59           
;;;60     }
000026  bd08              POP      {r3,pc}
;;;61     /****************************************************************************
                          ENDP

                  |L2.40|
                          DCD      0x40010c00

                          AREA ||i.LCD_WriteReg||, CODE, READONLY, ALIGN=1

                  LCD_WriteReg PROC
;;;210    ****************************************************************************/
;;;211    void LCD_WriteReg(u8 Index,u16 Data)
000000  b530              PUSH     {r4,r5,lr}
;;;212    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;213    	Lcd_WriteIndex(Index);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       Lcd_WriteIndex
;;;214      	Lcd_WriteData_16Bit(Data);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       Lcd_WriteData_16Bit
;;;215    }
000012  bd30              POP      {r4,r5,pc}
;;;216    
                          ENDP


                          AREA ||i.Lcd_Clear||, CODE, READONLY, ALIGN=2

                  Lcd_Clear PROC
;;;381    *************************************************/
;;;382    void Lcd_Clear(u16 Color)               
000000  b530              PUSH     {r4,r5,lr}
;;;383    {	
000002  4604              MOV      r4,r0
;;;384       unsigned int i;
;;;385       Lcd_SetRegion(0,0,X_MAX_PIXEL-1,Y_MAX_PIXEL-1);
000004  23af              MOVS     r3,#0xaf
000006  22db              MOVS     r2,#0xdb
000008  2100              MOVS     r1,#0
00000a  4608              MOV      r0,r1
00000c  f7fffffe          BL       Lcd_SetRegion
;;;386    	 LCD_CS_CLR;
000010  f44f6000          MOV      r0,#0x800
000014  490c              LDR      r1,|L4.72|
000016  6008              STR      r0,[r1,#0]
;;;387       LCD_RS_SET;	
000018  1040              ASRS     r0,r0,#1
00001a  1f09              SUBS     r1,r1,#4
00001c  6008              STR      r0,[r1,#0]
;;;388       for(i=0;i<38720;i++)
00001e  2500              MOVS     r5,#0
000020  e008              B        |L4.52|
                  |L4.34|
;;;389       {	
;;;390    	  	//Lcd_WriteData_16Bit(Color);
;;;391    #if USE_HARDWARE_SPI   
;;;392    		SPI_WriteByte(SPI2,Color>>8);
000022  1221              ASRS     r1,r4,#8
000024  4809              LDR      r0,|L4.76|
000026  f7fffffe          BL       SPI_WriteByte
;;;393    		SPI_WriteByte(SPI2,Color);
00002a  b2e1              UXTB     r1,r4
00002c  4807              LDR      r0,|L4.76|
00002e  f7fffffe          BL       SPI_WriteByte
000032  1c6d              ADDS     r5,r5,#1              ;388
                  |L4.52|
000034  f2497040          MOV      r0,#0x9740            ;388
000038  4285              CMP      r5,r0                 ;388
00003a  d3f2              BCC      |L4.34|
;;;394    #else
;;;395    		SPIv_WriteData(Color>>8);
;;;396    		SPIv_WriteData(Color);
;;;397    #endif 
;;;398       }   
;;;399    		LCD_CS_SET;
00003c  f44f6000          MOV      r0,#0x800
000040  4901              LDR      r1,|L4.72|
000042  1f09              SUBS     r1,r1,#4
000044  6008              STR      r0,[r1,#0]
;;;400    }
000046  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L4.72|
                          DCD      0x40010c14
                  |L4.76|
                          DCD      0x40003800

                          AREA ||i.Lcd_Init||, CODE, READONLY, ALIGN=1

                  Lcd_Init PROC
;;;250    ****************************************************************************/
;;;251    void Lcd_Init(void)
000000  b510              PUSH     {r4,lr}
;;;252    {	
;;;253    #if USE_HARDWARE_SPI //使用硬件SPI
;;;254    	SPI2_Init();
000002  f7fffffe          BL       SPI2_Init
;;;255    #else	
;;;256    	LCD_GPIO_Init();//使用模拟SPI
;;;257    #endif
;;;258    	Lcd_Reset(); //Reset before LCD Init.
000006  f7fffffe          BL       Lcd_Reset
;;;259    
;;;260    	//************* Start Initial Sequence **********//
;;;261      Lcd_WriteIndex(0x02); Lcd_WriteData_16Bit(0x0100); // set 1 line inversion
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       Lcd_WriteIndex
000010  f44f7080          MOV      r0,#0x100
000014  f7fffffe          BL       Lcd_WriteData_16Bit
;;;262    #if USE_HORIZONTAL//如果定义了横屏
;;;263    	//R01H:SM=0,GS=0,SS=0 (for details,See the datasheet of ILI9225)
;;;264    	LCD_WriteReg(0x01, 0x001C); // set the display line number and display direction
000018  211c              MOVS     r1,#0x1c
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       LCD_WriteReg
;;;265    	//R03H:BGR=1,ID0=1,ID1=1,AM=1 (for details,See the datasheet of ILI9225)
;;;266    	LCD_WriteReg(0x03, 0x1038); // set GRAM write direction .
000020  f2410138          MOV      r1,#0x1038
000024  2003              MOVS     r0,#3
000026  f7fffffe          BL       LCD_WriteReg
;;;267    #else//竖屏
;;;268    	//R01H:SM=0,GS=0,SS=1 (for details,See the datasheet of ILI9225)
;;;269    	LCD_WriteReg(0x01, 0x011C); // set the display line number and display direction 
;;;270    	//R03H:BGR=1,ID0=1,ID1=1,AM=0 (for details,See the datasheet of ILI9225)
;;;271    	LCD_WriteReg(0x03, 0x1030); // set GRAM write direction.
;;;272    #endif
;;;273    
;;;274      Lcd_WriteIndex(0x08); Lcd_WriteData_16Bit(0x0808); // set BP and FP
00002a  2008              MOVS     r0,#8
00002c  f7fffffe          BL       Lcd_WriteIndex
000030  f6400008          MOV      r0,#0x808
000034  f7fffffe          BL       Lcd_WriteData_16Bit
;;;275      Lcd_WriteIndex(0x0B); Lcd_WriteData_16Bit(0x1100); //frame cycle
000038  200b              MOVS     r0,#0xb
00003a  f7fffffe          BL       Lcd_WriteIndex
00003e  f44f5088          MOV      r0,#0x1100
000042  f7fffffe          BL       Lcd_WriteData_16Bit
;;;276      Lcd_WriteIndex(0x0C); Lcd_WriteData_16Bit(0x0000); // RGB interface setting R0Ch=0x0110 for RGB 18Bit and R0Ch=0111for RGB16Bit
000046  200c              MOVS     r0,#0xc
000048  f7fffffe          BL       Lcd_WriteIndex
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       Lcd_WriteData_16Bit
;;;277      Lcd_WriteIndex(0x0F); Lcd_WriteData_16Bit(0x1401); // Set frame rate----0801
000052  200f              MOVS     r0,#0xf
000054  f7fffffe          BL       Lcd_WriteIndex
000058  f2414001          MOV      r0,#0x1401
00005c  f7fffffe          BL       Lcd_WriteData_16Bit
;;;278      Lcd_WriteIndex(0x15); Lcd_WriteData_16Bit(0x0000); //set system interface
000060  2015              MOVS     r0,#0x15
000062  f7fffffe          BL       Lcd_WriteIndex
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       Lcd_WriteData_16Bit
;;;279      Lcd_WriteIndex(0x20); Lcd_WriteData_16Bit(0x0000); // Set GRAM Address
00006c  2020              MOVS     r0,#0x20
00006e  f7fffffe          BL       Lcd_WriteIndex
000072  2000              MOVS     r0,#0
000074  f7fffffe          BL       Lcd_WriteData_16Bit
;;;280      Lcd_WriteIndex(0x21); Lcd_WriteData_16Bit(0x0000); // Set GRAM Address
000078  2021              MOVS     r0,#0x21
00007a  f7fffffe          BL       Lcd_WriteIndex
00007e  2000              MOVS     r0,#0
000080  f7fffffe          BL       Lcd_WriteData_16Bit
;;;281      //*************Power On sequence ****************//
;;;282        delay_ms(50);                         // Delay 50ms
000084  2032              MOVS     r0,#0x32
000086  f7fffffe          BL       delay_ms
;;;283      Lcd_WriteIndex(0x10); Lcd_WriteData_16Bit(0x0800); // Set SAP,DSTB,STB----0A00
00008a  2010              MOVS     r0,#0x10
00008c  f7fffffe          BL       Lcd_WriteIndex
000090  f44f6000          MOV      r0,#0x800
000094  f7fffffe          BL       Lcd_WriteData_16Bit
;;;284      Lcd_WriteIndex(0x11); Lcd_WriteData_16Bit(0x1F3F); // Set APON,PON,AON,VCI1EN,VC----1038
000098  2011              MOVS     r0,#0x11
00009a  f7fffffe          BL       Lcd_WriteIndex
00009e  f641703f          MOV      r0,#0x1f3f
0000a2  f7fffffe          BL       Lcd_WriteData_16Bit
;;;285        delay_ms(50);                         // Delay 50ms
0000a6  2032              MOVS     r0,#0x32
0000a8  f7fffffe          BL       delay_ms
;;;286      Lcd_WriteIndex(0x12); Lcd_WriteData_16Bit(0x0121); // Internal reference voltage= Vci;----1121
0000ac  2012              MOVS     r0,#0x12
0000ae  f7fffffe          BL       Lcd_WriteIndex
0000b2  f2401021          MOV      r0,#0x121
0000b6  f7fffffe          BL       Lcd_WriteData_16Bit
;;;287      Lcd_WriteIndex(0x13); Lcd_WriteData_16Bit(0x006F); // Set GVDD----0066
0000ba  2013              MOVS     r0,#0x13
0000bc  f7fffffe          BL       Lcd_WriteIndex
0000c0  206f              MOVS     r0,#0x6f
0000c2  f7fffffe          BL       Lcd_WriteData_16Bit
;;;288      Lcd_WriteIndex(0x14); Lcd_WriteData_16Bit(0x4349); // Set VCOMH/VCOML voltage----5F60
0000c6  2014              MOVS     r0,#0x14
0000c8  f7fffffe          BL       Lcd_WriteIndex
0000cc  f2443049          MOV      r0,#0x4349
0000d0  f7fffffe          BL       Lcd_WriteData_16Bit
;;;289      //-------------- Set GRAM area -----------------//
;;;290      Lcd_WriteIndex(0x30); Lcd_WriteData_16Bit(0x0000);
0000d4  2030              MOVS     r0,#0x30
0000d6  f7fffffe          BL       Lcd_WriteIndex
0000da  2000              MOVS     r0,#0
0000dc  f7fffffe          BL       Lcd_WriteData_16Bit
;;;291      Lcd_WriteIndex(0x31); Lcd_WriteData_16Bit(0x00DB);
0000e0  2031              MOVS     r0,#0x31
0000e2  f7fffffe          BL       Lcd_WriteIndex
0000e6  20db              MOVS     r0,#0xdb
0000e8  f7fffffe          BL       Lcd_WriteData_16Bit
;;;292      Lcd_WriteIndex(0x32); Lcd_WriteData_16Bit(0x0000);
0000ec  2032              MOVS     r0,#0x32
0000ee  f7fffffe          BL       Lcd_WriteIndex
0000f2  2000              MOVS     r0,#0
0000f4  f7fffffe          BL       Lcd_WriteData_16Bit
;;;293      Lcd_WriteIndex(0x33); Lcd_WriteData_16Bit(0x0000);
0000f8  2033              MOVS     r0,#0x33
0000fa  f7fffffe          BL       Lcd_WriteIndex
0000fe  2000              MOVS     r0,#0
000100  f7fffffe          BL       Lcd_WriteData_16Bit
;;;294      Lcd_WriteIndex(0x34); Lcd_WriteData_16Bit(0x00DB);
000104  2034              MOVS     r0,#0x34
000106  f7fffffe          BL       Lcd_WriteIndex
00010a  20db              MOVS     r0,#0xdb
00010c  f7fffffe          BL       Lcd_WriteData_16Bit
;;;295      Lcd_WriteIndex(0x35); Lcd_WriteData_16Bit(0x0000);
000110  2035              MOVS     r0,#0x35
000112  f7fffffe          BL       Lcd_WriteIndex
000116  2000              MOVS     r0,#0
000118  f7fffffe          BL       Lcd_WriteData_16Bit
;;;296      Lcd_WriteIndex(0x36); Lcd_WriteData_16Bit(0x00AF);
00011c  2036              MOVS     r0,#0x36
00011e  f7fffffe          BL       Lcd_WriteIndex
000122  20af              MOVS     r0,#0xaf
000124  f7fffffe          BL       Lcd_WriteData_16Bit
;;;297      Lcd_WriteIndex(0x37); Lcd_WriteData_16Bit(0x0000);
000128  2037              MOVS     r0,#0x37
00012a  f7fffffe          BL       Lcd_WriteIndex
00012e  2000              MOVS     r0,#0
000130  f7fffffe          BL       Lcd_WriteData_16Bit
;;;298      Lcd_WriteIndex(0x38); Lcd_WriteData_16Bit(0x00DB);
000134  2038              MOVS     r0,#0x38
000136  f7fffffe          BL       Lcd_WriteIndex
00013a  20db              MOVS     r0,#0xdb
00013c  f7fffffe          BL       Lcd_WriteData_16Bit
;;;299      Lcd_WriteIndex(0x39); Lcd_WriteData_16Bit(0x0000);
000140  2039              MOVS     r0,#0x39
000142  f7fffffe          BL       Lcd_WriteIndex
000146  2000              MOVS     r0,#0
000148  f7fffffe          BL       Lcd_WriteData_16Bit
;;;300      // ----------- Adjust the Gamma Curve ----------//
;;;301      Lcd_WriteIndex(0x50); Lcd_WriteData_16Bit(0x0001);  //0400
00014c  2050              MOVS     r0,#0x50
00014e  f7fffffe          BL       Lcd_WriteIndex
000152  2001              MOVS     r0,#1
000154  f7fffffe          BL       Lcd_WriteData_16Bit
;;;302      Lcd_WriteIndex(0x51); Lcd_WriteData_16Bit(0x200B);  //060B
000158  2051              MOVS     r0,#0x51
00015a  f7fffffe          BL       Lcd_WriteIndex
00015e  f242000b          MOV      r0,#0x200b
000162  f7fffffe          BL       Lcd_WriteData_16Bit
;;;303      Lcd_WriteIndex(0x52); Lcd_WriteData_16Bit(0x0000);  //0C0A
000166  2052              MOVS     r0,#0x52
000168  f7fffffe          BL       Lcd_WriteIndex
00016c  2000              MOVS     r0,#0
00016e  f7fffffe          BL       Lcd_WriteData_16Bit
;;;304      Lcd_WriteIndex(0x53); Lcd_WriteData_16Bit(0x0404);  //0105
000172  2053              MOVS     r0,#0x53
000174  f7fffffe          BL       Lcd_WriteIndex
000178  f2404004          MOV      r0,#0x404
00017c  f7fffffe          BL       Lcd_WriteData_16Bit
;;;305      Lcd_WriteIndex(0x54); Lcd_WriteData_16Bit(0x0C0C);  //0A0C
000180  2054              MOVS     r0,#0x54
000182  f7fffffe          BL       Lcd_WriteIndex
000186  f640400c          MOV      r0,#0xc0c
00018a  f7fffffe          BL       Lcd_WriteData_16Bit
;;;306      Lcd_WriteIndex(0x55); Lcd_WriteData_16Bit(0x000C);  //0B06
00018e  2055              MOVS     r0,#0x55
000190  f7fffffe          BL       Lcd_WriteIndex
000194  200c              MOVS     r0,#0xc
000196  f7fffffe          BL       Lcd_WriteData_16Bit
;;;307      Lcd_WriteIndex(0x56); Lcd_WriteData_16Bit(0x0101);  //0004
00019a  2056              MOVS     r0,#0x56
00019c  f7fffffe          BL       Lcd_WriteIndex
0001a0  f2401001          MOV      r0,#0x101
0001a4  f7fffffe          BL       Lcd_WriteData_16Bit
;;;308      Lcd_WriteIndex(0x57); Lcd_WriteData_16Bit(0x0400);  //0501
0001a8  2057              MOVS     r0,#0x57
0001aa  f7fffffe          BL       Lcd_WriteIndex
0001ae  f44f6080          MOV      r0,#0x400
0001b2  f7fffffe          BL       Lcd_WriteData_16Bit
;;;309      Lcd_WriteIndex(0x58); Lcd_WriteData_16Bit(0x1108);  //0E00
0001b6  2058              MOVS     r0,#0x58
0001b8  f7fffffe          BL       Lcd_WriteIndex
0001bc  f2411008          MOV      r0,#0x1108
0001c0  f7fffffe          BL       Lcd_WriteData_16Bit
;;;310      Lcd_WriteIndex(0x59); Lcd_WriteData_16Bit(0x050C);  //000E
0001c4  2059              MOVS     r0,#0x59
0001c6  f7fffffe          BL       Lcd_WriteIndex
0001ca  f240500c          MOV      r0,#0x50c
0001ce  f7fffffe          BL       Lcd_WriteData_16Bit
;;;311      delay_ms(50);                                     // Delay 50ms
0001d2  2032              MOVS     r0,#0x32
0001d4  f7fffffe          BL       delay_ms
;;;312      Lcd_WriteIndex(0x07); Lcd_WriteData_16Bit(0x1017);
0001d8  2007              MOVS     r0,#7
0001da  f7fffffe          BL       Lcd_WriteIndex
0001de  f2410017          MOV      r0,#0x1017
0001e2  f7fffffe          BL       Lcd_WriteData_16Bit
;;;313      Lcd_WriteIndex(0x22);	
0001e6  2022              MOVS     r0,#0x22
0001e8  f7fffffe          BL       Lcd_WriteIndex
;;;314    }
0001ec  bd10              POP      {r4,pc}
;;;315    
                          ENDP


                          AREA ||i.Lcd_Reset||, CODE, READONLY, ALIGN=2

                  Lcd_Reset PROC
;;;236    ****************************************************************************/
;;;237    void Lcd_Reset(void)
000000  b510              PUSH     {r4,lr}
;;;238    {
;;;239    	LCD_RST_CLR;
000002  f44f5080          MOV      r0,#0x1000
000006  4907              LDR      r1,|L6.36|
000008  6008              STR      r0,[r1,#0]
;;;240    	delay_ms(100);
00000a  2064              MOVS     r0,#0x64
00000c  f7fffffe          BL       delay_ms
;;;241    	LCD_RST_SET;
000010  f44f5080          MOV      r0,#0x1000
000014  4903              LDR      r1,|L6.36|
000016  1f09              SUBS     r1,r1,#4
000018  6008              STR      r0,[r1,#0]
;;;242    	delay_ms(50);
00001a  2032              MOVS     r0,#0x32
00001c  f7fffffe          BL       delay_ms
;;;243    }
000020  bd10              POP      {r4,pc}
;;;244    /****************************************************************************
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
                          DCD      0x40010c14

                          AREA ||i.Lcd_SetRegion||, CODE, READONLY, ALIGN=1

                  Lcd_SetRegion PROC
;;;341    //设置显示窗口
;;;342    void Lcd_SetRegion(u8 xStar, u8 yStar,u8 xEnd,u8 yEnd)
000000  b5f0              PUSH     {r4-r7,lr}
;;;343    {
000002  4604              MOV      r4,r0
000004  460f              MOV      r7,r1
000006  4615              MOV      r5,r2
000008  461e              MOV      r6,r3
;;;344    #if USE_HORIZONTAL//如果定义了横屏	
;;;345    	LCD_WriteReg(0x38,xEnd);
00000a  4629              MOV      r1,r5
00000c  2038              MOVS     r0,#0x38
00000e  f7fffffe          BL       LCD_WriteReg
;;;346    	LCD_WriteReg(0x39,xStar);
000012  4621              MOV      r1,r4
000014  2039              MOVS     r0,#0x39
000016  f7fffffe          BL       LCD_WriteReg
;;;347    	LCD_WriteReg(0x36,yEnd);
00001a  4631              MOV      r1,r6
00001c  2036              MOVS     r0,#0x36
00001e  f7fffffe          BL       LCD_WriteReg
;;;348    	LCD_WriteReg(0x37,yStar);
000022  4639              MOV      r1,r7
000024  2037              MOVS     r0,#0x37
000026  f7fffffe          BL       LCD_WriteReg
;;;349    	LCD_WriteReg(0x21,xStar);
00002a  4621              MOV      r1,r4
00002c  2021              MOVS     r0,#0x21
00002e  f7fffffe          BL       LCD_WriteReg
;;;350    	LCD_WriteReg(0x20,yStar);
000032  4639              MOV      r1,r7
000034  2020              MOVS     r0,#0x20
000036  f7fffffe          BL       LCD_WriteReg
;;;351    #else//竖屏	
;;;352    	LCD_WriteReg(0x36,xEnd);
;;;353    	LCD_WriteReg(0x37,xStar);
;;;354    	LCD_WriteReg(0x38,yEnd);
;;;355    	LCD_WriteReg(0x39,yStar);
;;;356    	LCD_WriteReg(0x20,xStar);
;;;357    	LCD_WriteReg(0x21,yStar);
;;;358    #endif
;;;359    	Lcd_WriteIndex(0x22);	
00003a  2022              MOVS     r0,#0x22
00003c  f7fffffe          BL       Lcd_WriteIndex
;;;360    }
000040  bdf0              POP      {r4-r7,pc}
;;;361    
                          ENDP


                          AREA ||i.Lcd_SetXY||, CODE, READONLY, ALIGN=1

                  Lcd_SetXY PROC
;;;323    *************************************************/
;;;324    void Lcd_SetXY(u16 Xpos, u16 Ypos)
000000  b530              PUSH     {r4,r5,lr}
;;;325    {	
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;326    #if USE_HORIZONTAL//如果定义了横屏  	    	
;;;327    	LCD_WriteReg(0x21,Xpos);
000006  4621              MOV      r1,r4
000008  2021              MOVS     r0,#0x21
00000a  f7fffffe          BL       LCD_WriteReg
;;;328    	LCD_WriteReg(0x20,Ypos);
00000e  4629              MOV      r1,r5
000010  2020              MOVS     r0,#0x20
000012  f7fffffe          BL       LCD_WriteReg
;;;329    #else//竖屏	
;;;330    	LCD_WriteReg(0x20,Xpos);
;;;331    	LCD_WriteReg(0x21,Ypos);
;;;332    #endif
;;;333    	Lcd_WriteIndex(0x22);		
000016  2022              MOVS     r0,#0x22
000018  f7fffffe          BL       Lcd_WriteIndex
;;;334    } 
00001c  bd30              POP      {r4,r5,pc}
;;;335    /*************************************************
                          ENDP


                          AREA ||i.Lcd_WriteData||, CODE, READONLY, ALIGN=2

                  Lcd_WriteData PROC
;;;191    ****************************************************************************/
;;;192    void Lcd_WriteData(u8 Data)
000000  b500              PUSH     {lr}
;;;193    {
000002  4603              MOV      r3,r0
;;;194       LCD_CS_CLR;
000004  f44f6000          MOV      r0,#0x800
000008  4907              LDR      r1,|L9.40|
00000a  6008              STR      r0,[r1,#0]
;;;195       LCD_RS_SET;
00000c  1040              ASRS     r0,r0,#1
00000e  1f09              SUBS     r1,r1,#4
000010  6008              STR      r0,[r1,#0]
;;;196    #if USE_HARDWARE_SPI   
;;;197       SPI_WriteByte(SPI2,Data);
000012  4619              MOV      r1,r3
000014  4805              LDR      r0,|L9.44|
000016  f7fffffe          BL       SPI_WriteByte
;;;198    #else
;;;199       SPIv_WriteData(Data);
;;;200    #endif 
;;;201       LCD_CS_SET;
00001a  f44f6000          MOV      r0,#0x800
00001e  4902              LDR      r1,|L9.40|
000020  1f09              SUBS     r1,r1,#4
000022  6008              STR      r0,[r1,#0]
;;;202    }
000024  bd00              POP      {pc}
;;;203    
                          ENDP

000026  0000              DCW      0x0000
                  |L9.40|
                          DCD      0x40010c14
                  |L9.44|
                          DCD      0x40003800

                          AREA ||i.Lcd_WriteData_16Bit||, CODE, READONLY, ALIGN=1

                  Lcd_WriteData_16Bit PROC
;;;223    ****************************************************************************/
;;;224    void Lcd_WriteData_16Bit(u16 Data)
000000  b510              PUSH     {r4,lr}
;;;225    {	
000002  4604              MOV      r4,r0
;;;226    	Lcd_WriteData(Data>>8);
000004  1220              ASRS     r0,r4,#8
000006  f7fffffe          BL       Lcd_WriteData
;;;227    	Lcd_WriteData(Data);	
00000a  b2e0              UXTB     r0,r4
00000c  f7fffffe          BL       Lcd_WriteData
;;;228    }
000010  bd10              POP      {r4,pc}
;;;229    
                          ENDP


                          AREA ||i.Lcd_WriteIndex||, CODE, READONLY, ALIGN=2

                  Lcd_WriteIndex PROC
;;;172    ****************************************************************************/
;;;173    void Lcd_WriteIndex(u8 Index)
000000  b500              PUSH     {lr}
;;;174    {
000002  4603              MOV      r3,r0
;;;175       LCD_CS_CLR;
000004  f44f6000          MOV      r0,#0x800
000008  4906              LDR      r1,|L11.36|
00000a  6008              STR      r0,[r1,#0]
;;;176       LCD_RS_CLR;
00000c  1040              ASRS     r0,r0,#1
00000e  6008              STR      r0,[r1,#0]
;;;177    #if USE_HARDWARE_SPI   
;;;178       SPI_WriteByte(SPI2,Index);
000010  4619              MOV      r1,r3
000012  4805              LDR      r0,|L11.40|
000014  f7fffffe          BL       SPI_WriteByte
;;;179    #else
;;;180       SPIv_WriteData(Index);
;;;181    #endif 
;;;182       LCD_CS_SET;
000018  f44f6000          MOV      r0,#0x800
00001c  4901              LDR      r1,|L11.36|
00001e  1f09              SUBS     r1,r1,#4
000020  6008              STR      r0,[r1,#0]
;;;183    }
000022  bd00              POP      {pc}
;;;184    
                          ENDP

                  |L11.36|
                          DCD      0x40010c14
                  |L11.40|
                          DCD      0x40003800

                          AREA ||i.SPI2_Init||, CODE, READONLY, ALIGN=2

                  SPI2_Init PROC
;;;125    ****************************************************************************/
;;;126    void SPI2_Init(void)	
000000  b500              PUSH     {lr}
;;;127    {
000002  b087              SUB      sp,sp,#0x1c
;;;128    	SPI_InitTypeDef  SPI_InitStructure;
;;;129    	GPIO_InitTypeDef GPIO_InitStructure;
;;;130    	 
;;;131    	//配置SPI2管脚
;;;132    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO|RCC_APB2Periph_GPIOB, ENABLE);
000004  2101              MOVS     r1,#1
000006  2009              MOVS     r0,#9
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;133    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_15;
00000c  f44f4020          MOV      r0,#0xa000
000010  f8ad0004          STRH     r0,[sp,#4]
;;;134    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000014  2003              MOVS     r0,#3
000016  f88d0006          STRB     r0,[sp,#6]
;;;135    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001a  2018              MOVS     r0,#0x18
00001c  f88d0007          STRB     r0,[sp,#7]
;;;136    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000020  a901              ADD      r1,sp,#4
000022  4824              LDR      r0,|L12.180|
000024  f7fffffe          BL       GPIO_Init
;;;137    
;;;138    	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_14;    
000028  f44f4080          MOV      r0,#0x4000
00002c  f8ad0004          STRH     r0,[sp,#4]
;;;139    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; 
000030  2048              MOVS     r0,#0x48
000032  f88d0007          STRB     r0,[sp,#7]
;;;140    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
000036  2003              MOVS     r0,#3
000038  f88d0006          STRB     r0,[sp,#6]
;;;141    	GPIO_Init(GPIOB, &GPIO_InitStructure);  
00003c  a901              ADD      r1,sp,#4
00003e  481d              LDR      r0,|L12.180|
000040  f7fffffe          BL       GPIO_Init
;;;142    
;;;143    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9|GPIO_Pin_10| GPIO_Pin_11| GPIO_Pin_12;
000044  f44f50f0          MOV      r0,#0x1e00
000048  f8ad0004          STRH     r0,[sp,#4]
;;;144    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00004c  2003              MOVS     r0,#3
00004e  f88d0006          STRB     r0,[sp,#6]
;;;145    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000052  2010              MOVS     r0,#0x10
000054  f88d0007          STRB     r0,[sp,#7]
;;;146    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000058  a901              ADD      r1,sp,#4
00005a  4816              LDR      r0,|L12.180|
00005c  f7fffffe          BL       GPIO_Init
;;;147    	
;;;148    	//SPI2配置选项
;;;149    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2 ,ENABLE);
000060  2101              MOVS     r1,#1
000062  0388              LSLS     r0,r1,#14
000064  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;150    	   
;;;151    	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000068  2000              MOVS     r0,#0
00006a  f8ad0008          STRH     r0,[sp,#8]
;;;152    	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
00006e  f44f7082          MOV      r0,#0x104
000072  f8ad000a          STRH     r0,[sp,#0xa]
;;;153    	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
000076  2000              MOVS     r0,#0
000078  f8ad000c          STRH     r0,[sp,#0xc]
;;;154    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
00007c  2002              MOVS     r0,#2
00007e  f8ad000e          STRH     r0,[sp,#0xe]
;;;155    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
000082  2001              MOVS     r0,#1
000084  f8ad0010          STRH     r0,[sp,#0x10]
;;;156    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
000088  0240              LSLS     r0,r0,#9
00008a  f8ad0012          STRH     r0,[sp,#0x12]
;;;157    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
00008e  2000              MOVS     r0,#0
000090  f8ad0014          STRH     r0,[sp,#0x14]
;;;158    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
000094  f8ad0016          STRH     r0,[sp,#0x16]
;;;159    	SPI_InitStructure.SPI_CRCPolynomial = 7;
000098  2007              MOVS     r0,#7
00009a  f8ad0018          STRH     r0,[sp,#0x18]
;;;160    	SPI_Init(SPI2, &SPI_InitStructure);
00009e  a902              ADD      r1,sp,#8
0000a0  4805              LDR      r0,|L12.184|
0000a2  f7fffffe          BL       SPI_Init
;;;161    
;;;162    	//使能SPI2
;;;163    	SPI_Cmd(SPI2, ENABLE);   
0000a6  2101              MOVS     r1,#1
0000a8  4803              LDR      r0,|L12.184|
0000aa  f7fffffe          BL       SPI_Cmd
;;;164    }
0000ae  b007              ADD      sp,sp,#0x1c
0000b0  bd00              POP      {pc}
;;;165    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L12.180|
                          DCD      0x40010c00
                  |L12.184|
                          DCD      0x40003800

                          AREA ||i.SPI_SetSpeed||, CODE, READONLY, ALIGN=1

                  SPI_SetSpeed PROC
;;;104    ****************************************************************************/
;;;105    void SPI_SetSpeed(SPI_TypeDef* SPIx,u8 SpeedSet)
000000  8802              LDRH     r2,[r0,#0]
;;;106    {
;;;107    	SPIx->CR1&=0XFFC7;
000002  f64f73c7          MOV      r3,#0xffc7
000006  401a              ANDS     r2,r2,r3
000008  8002              STRH     r2,[r0,#0]
;;;108    	if(SpeedSet==1)//高速
00000a  2901              CMP      r1,#1
00000c  d102              BNE      |L13.20|
;;;109    	{
;;;110    		SPIx->CR1|=SPI_BaudRatePrescaler_2;//Fsck=Fpclk/2	
00000e  8802              LDRH     r2,[r0,#0]
000010  8002              STRH     r2,[r0,#0]
000012  e003              B        |L13.28|
                  |L13.20|
;;;111    	}
;;;112    	else//低速
;;;113    	{
;;;114    		SPIx->CR1|=SPI_BaudRatePrescaler_32; //Fsck=Fpclk/32
000014  8802              LDRH     r2,[r0,#0]
000016  f0420220          ORR      r2,r2,#0x20
00001a  8002              STRH     r2,[r0,#0]
                  |L13.28|
;;;115    	}
;;;116    	SPIx->CR1|=1<<6; //SPI设备使能
00001c  8802              LDRH     r2,[r0,#0]
00001e  f0420240          ORR      r2,r2,#0x40
000022  8002              STRH     r2,[r0,#0]
;;;117    } 
000024  4770              BX       lr
;;;118    
                          ENDP


                          AREA ||i.SPI_WriteByte||, CODE, READONLY, ALIGN=1

                  SPI_WriteByte PROC
;;;89     ****************************************************************************/
;;;90     u8 SPI_WriteByte(SPI_TypeDef* SPIx,u8 Byte)
000000  4602              MOV      r2,r0
;;;91     {
;;;92     	while((SPIx->SR&SPI_I2S_FLAG_TXE)==RESET);		//等待发送区空	  
000002  bf00              NOP      
                  |L14.4|
000004  8910              LDRH     r0,[r2,#8]
000006  f0000002          AND      r0,r0,#2
00000a  2800              CMP      r0,#0
00000c  d0fa              BEQ      |L14.4|
;;;93     	SPIx->DR=Byte;	 	//发送一个byte   
00000e  8191              STRH     r1,[r2,#0xc]
;;;94     	while((SPIx->SR&SPI_I2S_FLAG_RXNE)==RESET);//等待接收完一个byte  
000010  bf00              NOP      
                  |L14.18|
000012  8910              LDRH     r0,[r2,#8]
000014  f0000001          AND      r0,r0,#1
000018  2800              CMP      r0,#0
00001a  d0fa              BEQ      |L14.18|
;;;95     	return SPIx->DR;          	     //返回收到的数据			
00001c  8990              LDRH     r0,[r2,#0xc]
00001e  b2c0              UXTB     r0,r0
;;;96     } 
000020  4770              BX       lr
;;;97     
                          ENDP


                          AREA ||i.SPIv_WriteData||, CODE, READONLY, ALIGN=2

                  SPIv_WriteData PROC
;;;67     ****************************************************************************/
;;;68     void  SPIv_WriteData(u8 Data)
000000  2100              MOVS     r1,#0
;;;69     {
;;;70     	unsigned char i=0;
;;;71     	for(i=8;i>0;i--)
000002  2108              MOVS     r1,#8
000004  e017              B        |L15.54|
                  |L15.6|
;;;72     	{
;;;73     		if(Data&0x80)	
000006  f0000280          AND      r2,r0,#0x80
00000a  b122              CBZ      r2,|L15.22|
;;;74     	  LCD_SDA_SET; //输出数据
00000c  f44f4200          MOV      r2,#0x8000
000010  4b0a              LDR      r3,|L15.60|
000012  601a              STR      r2,[r3,#0]
000014  e004              B        |L15.32|
                  |L15.22|
;;;75           else LCD_SDA_CLR;
000016  f44f4200          MOV      r2,#0x8000
00001a  4b08              LDR      r3,|L15.60|
00001c  1d1b              ADDS     r3,r3,#4
00001e  601a              STR      r2,[r3,#0]
                  |L15.32|
;;;76     	   
;;;77           LCD_SCL_CLR;       
000020  f44f5200          MOV      r2,#0x2000
000024  4b05              LDR      r3,|L15.60|
000026  1d1b              ADDS     r3,r3,#4
000028  601a              STR      r2,[r3,#0]
;;;78           LCD_SCL_SET;
00002a  1f1b              SUBS     r3,r3,#4
00002c  601a              STR      r2,[r3,#0]
;;;79           Data<<=1; 
00002e  0642              LSLS     r2,r0,#25
000030  0e10              LSRS     r0,r2,#24
000032  1e4a              SUBS     r2,r1,#1              ;71
000034  b2d1              UXTB     r1,r2                 ;71
                  |L15.54|
000036  2900              CMP      r1,#0                 ;71
000038  dce5              BGT      |L15.6|
;;;80     	}
;;;81     }
00003a  4770              BX       lr
;;;82     
                          ENDP

                  |L15.60|
                          DCD      0x40010c10
