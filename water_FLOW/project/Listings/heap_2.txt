; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\heap_2.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\heap_2.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\main -I..\component\delay -I..\component\LED -I..\component\sys -I..\component\usart -I..\STM32_lib\CORE -I..\STM32_lib\inc -I..\STM32_lib\user_layer -I..\component\KEY -I..\component\lcd_driver -I..\component\gui -I..\component\UI -I..\component\RTC -I..\component\FreeRTOS\Source\include -I..\component\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\component\FreeRTOS -I..\component\FreeRTOS\Source\portable\MemMang -IE:\1.项目\1.水流量计\water_FLOW\project\RTE -ID:\1.Software_\5.Keil5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\1.Software_\5.Keil5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DRVDS_ARMCM3_LM3S102 -Dwater_flow --omf_browse=..\obj\heap_2.crf ..\component\FreeRTOS\Source\portable\MemMang\heap_2.c]
                          THUMB

                          AREA ||i.prvHeapInit||, CODE, READONLY, ALIGN=2

                  prvHeapInit PROC
;;;290    
;;;291    static void prvHeapInit( void )
000000  4a0a              LDR      r2,|L1.44|
;;;292    {
;;;293    BlockLink_t *pxFirstFreeBlock;
;;;294    uint8_t *pucAlignedHeap;
;;;295    
;;;296    	/* Ensure the heap starts on a correctly aligned boundary. */
;;;297    	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
000002  f0220007          BIC      r0,r2,#7
;;;298    
;;;299    	/* xStart is used to hold a pointer to the first item in the list of free
;;;300    	blocks.  The void cast is used to prevent compiler warnings. */
;;;301    	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
000006  4a0a              LDR      r2,|L1.48|
000008  6010              STR      r0,[r2,#0]  ; xStart
;;;302    	xStart.xBlockSize = ( size_t ) 0;
00000a  2200              MOVS     r2,#0
00000c  4b08              LDR      r3,|L1.48|
00000e  605a              STR      r2,[r3,#4]  ; xStart
;;;303    
;;;304    	/* xEnd is used to mark the end of the list of free blocks. */
;;;305    	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
000010  f24432f8          MOV      r2,#0x43f8
000014  4b07              LDR      r3,|L1.52|
000016  605a              STR      r2,[r3,#4]  ; xEnd
;;;306    	xEnd.pxNextFreeBlock = NULL;
000018  2200              MOVS     r2,#0
00001a  601a              STR      r2,[r3,#0]  ; xEnd
;;;307    
;;;308    	/* To start with there is a single free block that is sized to take up the
;;;309    	entire heap space. */
;;;310    	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
00001c  4601              MOV      r1,r0
;;;311    	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
00001e  f24432f8          MOV      r2,#0x43f8
000022  604a              STR      r2,[r1,#4]
;;;312    	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
000024  461a              MOV      r2,r3
000026  600a              STR      r2,[r1,#0]
;;;313    }
000028  4770              BX       lr
;;;314    /*-----------------------------------------------------------*/
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      ucHeap+0x8
                  |L1.48|
                          DCD      xStart
                  |L1.52|
                          DCD      xEnd

                          AREA ||i.pvPortMalloc||, CODE, READONLY, ALIGN=2

                  pvPortMalloc PROC
;;;159    
;;;160    void *pvPortMalloc( size_t xWantedSize )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;161    {
000004  4604              MOV      r4,r0
;;;162    BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
;;;163    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
;;;164    void *pvReturn = NULL;
000006  f04f0800          MOV      r8,#0
;;;165    
;;;166    	vTaskSuspendAll();
00000a  f7fffffe          BL       vTaskSuspendAll
;;;167    	{
;;;168    		/* If this is the first call to malloc then the heap will require
;;;169    		initialisation to setup the list of free blocks. */
;;;170    		if( xHeapHasBeenInitialised == pdFALSE )
00000e  4826              LDR      r0,|L2.168|
000010  6800              LDR      r0,[r0,#0]  ; xHeapHasBeenInitialised
000012  b920              CBNZ     r0,|L2.30|
;;;171    		{
;;;172    			prvHeapInit();
000014  f7fffffe          BL       prvHeapInit
;;;173    			xHeapHasBeenInitialised = pdTRUE;
000018  2001              MOVS     r0,#1
00001a  4923              LDR      r1,|L2.168|
00001c  6008              STR      r0,[r1,#0]  ; xHeapHasBeenInitialised
                  |L2.30|
;;;174    		}
;;;175    
;;;176    		/* The wanted size is increased so it can contain a BlockLink_t
;;;177    		structure in addition to the requested amount of bytes. */
;;;178    		if( xWantedSize > 0 )
00001e  b144              CBZ      r4,|L2.50|
;;;179    		{
;;;180    			xWantedSize += heapSTRUCT_SIZE;
000020  3408              ADDS     r4,r4,#8
;;;181    
;;;182    			/* Ensure that blocks are always aligned to the required number of bytes. */
;;;183    			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
000022  f0040007          AND      r0,r4,#7
000026  b120              CBZ      r0,|L2.50|
;;;184    			{
;;;185    				/* Byte alignment required. */
;;;186    				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
000028  f0040007          AND      r0,r4,#7
00002c  f1c00008          RSB      r0,r0,#8
000030  4404              ADD      r4,r4,r0
                  |L2.50|
;;;187    			}
;;;188    		}
;;;189    
;;;190    		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
000032  2c00              CMP      r4,#0
000034  d032              BEQ      |L2.156|
000036  f24430f8          MOV      r0,#0x43f8
00003a  4284              CMP      r4,r0
00003c  d22e              BCS      |L2.156|
;;;191    		{
;;;192    			/* Blocks are stored in byte order - traverse the list from the start
;;;193    			(smallest) block until one of adequate size is found. */
;;;194    			pxPreviousBlock = &xStart;
00003e  4f1b              LDR      r7,|L2.172|
;;;195    			pxBlock = xStart.pxNextFreeBlock;
000040  4638              MOV      r0,r7
000042  6805              LDR      r5,[r0,#0]  ; xStart
;;;196    			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
000044  e001              B        |L2.74|
                  |L2.70|
;;;197    			{
;;;198    				pxPreviousBlock = pxBlock;
000046  462f              MOV      r7,r5
;;;199    				pxBlock = pxBlock->pxNextFreeBlock;
000048  682d              LDR      r5,[r5,#0]
                  |L2.74|
00004a  6868              LDR      r0,[r5,#4]            ;196
00004c  42a0              CMP      r0,r4                 ;196
00004e  d202              BCS      |L2.86|
000050  6828              LDR      r0,[r5,#0]            ;196
000052  2800              CMP      r0,#0                 ;196
000054  d1f7              BNE      |L2.70|
                  |L2.86|
;;;200    			}
;;;201    
;;;202    			/* If we found the end marker then a block of adequate size was not found. */
;;;203    			if( pxBlock != &xEnd )
000056  4816              LDR      r0,|L2.176|
000058  4285              CMP      r5,r0
00005a  d01f              BEQ      |L2.156|
;;;204    			{
;;;205    				/* Return the memory space - jumping over the BlockLink_t structure
;;;206    				at its start. */
;;;207    				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
00005c  6838              LDR      r0,[r7,#0]
00005e  f1000808          ADD      r8,r0,#8
;;;208    
;;;209    				/* This block is being returned for use so must be taken out of the
;;;210    				list of free blocks. */
;;;211    				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
000062  6828              LDR      r0,[r5,#0]
000064  6038              STR      r0,[r7,#0]
;;;212    
;;;213    				/* If the block is larger than required it can be split into two. */
;;;214    				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
000066  6868              LDR      r0,[r5,#4]
000068  1b00              SUBS     r0,r0,r4
00006a  2810              CMP      r0,#0x10
00006c  d910              BLS      |L2.144|
;;;215    				{
;;;216    					/* This block is to be split into two.  Create a new block
;;;217    					following the number of bytes requested. The void cast is
;;;218    					used to prevent byte alignment warnings from the compiler. */
;;;219    					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
00006e  192e              ADDS     r6,r5,r4
;;;220    
;;;221    					/* Calculate the sizes of two blocks split from the single
;;;222    					block. */
;;;223    					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
000070  6868              LDR      r0,[r5,#4]
000072  1b00              SUBS     r0,r0,r4
000074  6070              STR      r0,[r6,#4]
;;;224    					pxBlock->xBlockSize = xWantedSize;
000076  606c              STR      r4,[r5,#4]
;;;225    
;;;226    					/* Insert the new block into the list of free blocks. */
;;;227    					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
000078  6871              LDR      r1,[r6,#4]
00007a  480c              LDR      r0,|L2.172|
00007c  e000              B        |L2.128|
                  |L2.126|
00007e  6800              LDR      r0,[r0,#0]
                  |L2.128|
000080  6802              LDR      r2,[r0,#0]
000082  6852              LDR      r2,[r2,#4]
000084  428a              CMP      r2,r1
000086  d3fa              BCC      |L2.126|
000088  6802              LDR      r2,[r0,#0]
00008a  6032              STR      r2,[r6,#0]
00008c  6006              STR      r6,[r0,#0]
00008e  bf00              NOP      
                  |L2.144|
;;;228    				}
;;;229    
;;;230    				xFreeBytesRemaining -= pxBlock->xBlockSize;
000090  4908              LDR      r1,|L2.180|
000092  6868              LDR      r0,[r5,#4]
000094  6809              LDR      r1,[r1,#0]  ; xFreeBytesRemaining
000096  1a08              SUBS     r0,r1,r0
000098  4906              LDR      r1,|L2.180|
00009a  6008              STR      r0,[r1,#0]  ; xFreeBytesRemaining
                  |L2.156|
;;;231    			}
;;;232    		}
;;;233    
;;;234    		traceMALLOC( pvReturn, xWantedSize );
;;;235    	}
;;;236    	( void ) xTaskResumeAll();
00009c  f7fffffe          BL       xTaskResumeAll
;;;237    
;;;238    	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
;;;239    	{
;;;240    		if( pvReturn == NULL )
;;;241    		{
;;;242    			extern void vApplicationMallocFailedHook( void );
;;;243    			vApplicationMallocFailedHook();
;;;244    		}
;;;245    	}
;;;246    	#endif
;;;247    
;;;248    	return pvReturn;
0000a0  4640              MOV      r0,r8
;;;249    }
0000a2  e8bd81f0          POP      {r4-r8,pc}
;;;250    /*-----------------------------------------------------------*/
                          ENDP

0000a6  0000              DCW      0x0000
                  |L2.168|
                          DCD      xHeapHasBeenInitialised
                  |L2.172|
                          DCD      xStart
                  |L2.176|
                          DCD      xEnd
                  |L2.180|
                          DCD      xFreeBytesRemaining

                          AREA ||i.vPortFree||, CODE, READONLY, ALIGN=2

                  vPortFree PROC
;;;251    
;;;252    void vPortFree( void *pv )
000000  b570              PUSH     {r4-r6,lr}
;;;253    {
000002  4606              MOV      r6,r0
;;;254    uint8_t *puc = ( uint8_t * ) pv;
000004  4635              MOV      r5,r6
;;;255    BlockLink_t *pxLink;
;;;256    
;;;257    	if( pv != NULL )
000006  b1b6              CBZ      r6,|L3.54|
;;;258    	{
;;;259    		/* The memory being freed will have an BlockLink_t structure immediately
;;;260    		before it. */
;;;261    		puc -= heapSTRUCT_SIZE;
000008  3d08              SUBS     r5,r5,#8
;;;262    
;;;263    		/* This unexpected casting is to keep some compilers from issuing
;;;264    		byte alignment warnings. */
;;;265    		pxLink = ( void * ) puc;
00000a  462c              MOV      r4,r5
;;;266    
;;;267    		vTaskSuspendAll();
00000c  f7fffffe          BL       vTaskSuspendAll
;;;268    		{
;;;269    			/* Add this block to the list of free blocks. */
;;;270    			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
000010  6861              LDR      r1,[r4,#4]
000012  4809              LDR      r0,|L3.56|
000014  e000              B        |L3.24|
                  |L3.22|
000016  6800              LDR      r0,[r0,#0]
                  |L3.24|
000018  6802              LDR      r2,[r0,#0]
00001a  6852              LDR      r2,[r2,#4]
00001c  428a              CMP      r2,r1
00001e  d3fa              BCC      |L3.22|
000020  6802              LDR      r2,[r0,#0]
000022  6022              STR      r2,[r4,#0]
000024  6004              STR      r4,[r0,#0]
;;;271    			xFreeBytesRemaining += pxLink->xBlockSize;
000026  4905              LDR      r1,|L3.60|
000028  6860              LDR      r0,[r4,#4]
00002a  6809              LDR      r1,[r1,#0]  ; xFreeBytesRemaining
00002c  4408              ADD      r0,r0,r1
00002e  4903              LDR      r1,|L3.60|
000030  6008              STR      r0,[r1,#0]  ; xFreeBytesRemaining
;;;272    			traceFREE( pv, pxLink->xBlockSize );
;;;273    		}
;;;274    		( void ) xTaskResumeAll();
000032  f7fffffe          BL       xTaskResumeAll
                  |L3.54|
;;;275    	}
;;;276    }
000036  bd70              POP      {r4-r6,pc}
;;;277    /*-----------------------------------------------------------*/
                          ENDP

                  |L3.56|
                          DCD      xStart
                  |L3.60|
                          DCD      xFreeBytesRemaining

                          AREA ||i.vPortInitialiseBlocks||, CODE, READONLY, ALIGN=1

                  vPortInitialiseBlocks PROC
;;;284    
;;;285    void vPortInitialiseBlocks( void )
000000  4770              BX       lr
;;;286    {
;;;287    	/* This just exists to keep the linker quiet. */
;;;288    }
;;;289    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xPortGetFreeHeapSize||, CODE, READONLY, ALIGN=2

                  xPortGetFreeHeapSize PROC
;;;278    
;;;279    size_t xPortGetFreeHeapSize( void )
000000  4801              LDR      r0,|L5.8|
;;;280    {
;;;281    	return xFreeBytesRemaining;
000002  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
;;;282    }
000004  4770              BX       lr
;;;283    /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      xFreeBytesRemaining

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ucHeap
                          %        17408

                          AREA ||.data||, DATA, ALIGN=2

                  xStart
                          %        8
                  xEnd
                          %        8
                  xFreeBytesRemaining
                          DCD      0x000043f8
                  xHeapHasBeenInitialised
                          DCD      0x00000000
