; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\event_groups.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\event_groups.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\main -I..\component\delay -I..\component\LED -I..\component\sys -I..\component\usart -I..\STM32_lib\CORE -I..\STM32_lib\inc -I..\STM32_lib\user_layer -I..\component\KEY -I..\component\lcd_driver -I..\component\gui -I..\component\UI -I..\component\RTC -I..\component\FreeRTOS\Source\include -I..\component\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\component\FreeRTOS -I..\component\FreeRTOS\Source\portable\MemMang -I..\component\FreeRTOS\Source\CMSIS_RTOS -I..\component\STMFLASH -I..\component\PWM_in -IE:\1.项目\1.水流量计\WATER-FLOW\water_FLOW\project\RTE -ID:\1.Software_\5.Keil5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\1.Software_\5.Keil5\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -Dwater_flow --omf_browse=..\obj\event_groups.crf ..\component\FreeRTOS\Source\event_groups.c]
                          THUMB

                          AREA ||i.prvTestWaitCondition||, CODE, READONLY, ALIGN=1

                  prvTestWaitCondition PROC
;;;681    
;;;682    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
000000  b510              PUSH     {r4,lr}
;;;683    {
000002  4603              MOV      r3,r0
;;;684    BaseType_t xWaitConditionMet = pdFALSE;
000004  2000              MOVS     r0,#0
;;;685    
;;;686    	if( xWaitForAllBits == pdFALSE )
000006  b922              CBNZ     r2,|L1.18|
;;;687    	{
;;;688    		/* Task only has to wait for one bit within uxBitsToWaitFor to be
;;;689    		set.  Is one already set? */
;;;690    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
000008  ea030401          AND      r4,r3,r1
00000c  b134              CBZ      r4,|L1.28|
;;;691    		{
;;;692    			xWaitConditionMet = pdTRUE;
00000e  2001              MOVS     r0,#1
000010  e004              B        |L1.28|
                  |L1.18|
;;;693    		}
;;;694    		else
;;;695    		{
;;;696    			mtCOVERAGE_TEST_MARKER();
;;;697    		}
;;;698    	}
;;;699    	else
;;;700    	{
;;;701    		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
;;;702    		Are they set already? */
;;;703    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
000012  ea030401          AND      r4,r3,r1
000016  428c              CMP      r4,r1
000018  d100              BNE      |L1.28|
;;;704    		{
;;;705    			xWaitConditionMet = pdTRUE;
00001a  2001              MOVS     r0,#1
                  |L1.28|
;;;706    		}
;;;707    		else
;;;708    		{
;;;709    			mtCOVERAGE_TEST_MARKER();
;;;710    		}
;;;711    	}
;;;712    
;;;713    	return xWaitConditionMet;
;;;714    }
00001c  bd10              POP      {r4,pc}
;;;715    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.uxEventGroupGetNumber||, CODE, READONLY, ALIGN=1

                  uxEventGroupGetNumber PROC
;;;733    
;;;734    	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
000000  4601              MOV      r1,r0
;;;735    	{
;;;736    	UBaseType_t xReturn;
;;;737    	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000002  460a              MOV      r2,r1
;;;738    
;;;739    		if( xEventGroup == NULL )
000004  b909              CBNZ     r1,|L2.10|
;;;740    		{
;;;741    			xReturn = 0;
000006  2000              MOVS     r0,#0
000008  e000              B        |L2.12|
                  |L2.10|
;;;742    		}
;;;743    		else
;;;744    		{
;;;745    			xReturn = pxEventBits->uxEventGroupNumber;
00000a  6990              LDR      r0,[r2,#0x18]
                  |L2.12|
;;;746    		}
;;;747    
;;;748    		return xReturn;
;;;749    	}
00000c  4770              BX       lr
;;;750    
                          ENDP


                          AREA ||i.vEventGroupClearBitsCallback||, CODE, READONLY, ALIGN=1

                  vEventGroupClearBitsCallback PROC
;;;675    an interrupt. */
;;;676    void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
000000  b570              PUSH     {r4-r6,lr}
;;;677    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;678    	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       xEventGroupClearBits
;;;679    }
00000e  bd70              POP      {r4-r6,pc}
;;;680    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupDelete||, CODE, READONLY, ALIGN=1

                  vEventGroupDelete PROC
;;;623    
;;;624    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
000000  b570              PUSH     {r4-r6,lr}
;;;625    {
000002  4605              MOV      r5,r0
;;;626    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000004  462e              MOV      r6,r5
;;;627    const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
000006  1d34              ADDS     r4,r6,#4
;;;628    
;;;629    	vTaskSuspendAll();
000008  f7fffffe          BL       vTaskSuspendAll
;;;630    	{
;;;631    		traceEVENT_GROUP_DELETE( xEventGroup );
;;;632    
;;;633    		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
00000c  e018              B        |L4.64|
                  |L4.14|
;;;634    		{
;;;635    			/* Unblock the task, returning 0 as the event list is being deleted
;;;636    			and	cannot therefore have any bits set. */
;;;637    			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
00000e  f1040008          ADD      r0,r4,#8
000012  68e1              LDR      r1,[r4,#0xc]
000014  4281              CMP      r1,r0
000016  d001              BEQ      |L4.28|
000018  2001              MOVS     r0,#1
00001a  e000              B        |L4.30|
                  |L4.28|
00001c  2000              MOVS     r0,#0
                  |L4.30|
00001e  b950              CBNZ     r0,|L4.54|
000020  bf00              NOP      
000022  2030              MOVS     r0,#0x30
000024  f3808811          MSR      BASEPRI,r0
000028  f3bf8f4f          DSB      
00002c  f3bf8f6f          ISB      
000030  bf00              NOP      
000032  bf00              NOP      
                  |L4.52|
000034  e7fe              B        |L4.52|
                  |L4.54|
;;;638    			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
000036  f04f7100          MOV      r1,#0x2000000
00003a  68e0              LDR      r0,[r4,#0xc]
00003c  f7fffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L4.64|
000040  6820              LDR      r0,[r4,#0]            ;633
000042  2800              CMP      r0,#0                 ;633
000044  d1e3              BNE      |L4.14|
;;;639    		}
;;;640    
;;;641    		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
;;;642    		{
;;;643    			/* The event group can only have been allocated dynamically - free
;;;644    			it again. */
;;;645    			vPortFree( pxEventBits );
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       vPortFree
;;;646    		}
;;;647    		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
;;;648    		{
;;;649    			/* The event group could have been allocated statically or
;;;650    			dynamically, so check before attempting to free the memory. */
;;;651    			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
;;;652    			{
;;;653    				vPortFree( pxEventBits );
;;;654    			}
;;;655    			else
;;;656    			{
;;;657    				mtCOVERAGE_TEST_MARKER();
;;;658    			}
;;;659    		}
;;;660    		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
;;;661    	}
;;;662    	( void ) xTaskResumeAll();
00004c  f7fffffe          BL       xTaskResumeAll
;;;663    }
000050  bd70              POP      {r4-r6,pc}
;;;664    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupSetBitsCallback||, CODE, READONLY, ALIGN=1

                  vEventGroupSetBitsCallback PROC
;;;667    an interrupt. */
;;;668    void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
000000  b570              PUSH     {r4-r6,lr}
;;;669    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;670    	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       xEventGroupSetBits
;;;671    }
00000e  bd70              POP      {r4-r6,pc}
;;;672    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupClearBits||, CODE, READONLY, ALIGN=1

                  xEventGroupClearBits PROC
;;;471    
;;;472    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;473    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;474    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000008  462c              MOV      r4,r5
;;;475    EventBits_t uxReturn;
;;;476    
;;;477    	/* Check the user is not attempting to clear the bits used by the kernel
;;;478    	itself. */
;;;479    	configASSERT( xEventGroup );
00000a  b955              CBNZ     r5,|L6.34|
00000c  bf00              NOP      
00000e  2030              MOVS     r0,#0x30
000010  f3808811          MSR      BASEPRI,r0
000014  f3bf8f4f          DSB      
000018  f3bf8f6f          ISB      
00001c  bf00              NOP      
00001e  bf00              NOP      
                  |L6.32|
000020  e7fe              B        |L6.32|
                  |L6.34|
;;;480    	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000022  f006407f          AND      r0,r6,#0xff000000
000026  b908              CBNZ     r0,|L6.44|
000028  2001              MOVS     r0,#1
00002a  e000              B        |L6.46|
                  |L6.44|
00002c  2000              MOVS     r0,#0
                  |L6.46|
00002e  b950              CBNZ     r0,|L6.70|
000030  bf00              NOP      
000032  2030              MOVS     r0,#0x30
000034  f3808811          MSR      BASEPRI,r0
000038  f3bf8f4f          DSB      
00003c  f3bf8f6f          ISB      
000040  bf00              NOP      
000042  bf00              NOP      
                  |L6.68|
000044  e7fe              B        |L6.68|
                  |L6.70|
;;;481    
;;;482    	taskENTER_CRITICAL();
000046  f7fffffe          BL       vPortEnterCritical
;;;483    	{
;;;484    		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
;;;485    
;;;486    		/* The value returned is the event group value prior to the bits being
;;;487    		cleared. */
;;;488    		uxReturn = pxEventBits->uxEventBits;
00004a  6827              LDR      r7,[r4,#0]
;;;489    
;;;490    		/* Clear the bits. */
;;;491    		pxEventBits->uxEventBits &= ~uxBitsToClear;
00004c  6820              LDR      r0,[r4,#0]
00004e  43b0              BICS     r0,r0,r6
000050  6020              STR      r0,[r4,#0]
;;;492    	}
;;;493    	taskEXIT_CRITICAL();
000052  f7fffffe          BL       vPortExitCritical
;;;494    
;;;495    	return uxReturn;
000056  4638              MOV      r0,r7
;;;496    }
000058  e8bd81f0          POP      {r4-r8,pc}
;;;497    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupCreate||, CODE, READONLY, ALIGN=1

                  xEventGroupCreate PROC
;;;173    
;;;174    	EventGroupHandle_t xEventGroupCreate( void )
000000  b510              PUSH     {r4,lr}
;;;175    	{
;;;176    	EventGroup_t *pxEventBits;
;;;177    
;;;178    		/* Allocate the event group. */
;;;179    		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
000002  201c              MOVS     r0,#0x1c
000004  f7fffffe          BL       pvPortMalloc
000008  4604              MOV      r4,r0
;;;180    
;;;181    		if( pxEventBits != NULL )
00000a  b124              CBZ      r4,|L7.22|
;;;182    		{
;;;183    			pxEventBits->uxEventBits = 0;
00000c  2000              MOVS     r0,#0
00000e  6020              STR      r0,[r4,#0]
;;;184    			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
000010  1d20              ADDS     r0,r4,#4
000012  f7fffffe          BL       vListInitialise
                  |L7.22|
;;;185    
;;;186    			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;187    			{
;;;188    				/* Both static and dynamic allocation can be used, so note this
;;;189    				event group was allocated statically in case the event group is
;;;190    				later deleted. */
;;;191    				pxEventBits->ucStaticallyAllocated = pdFALSE;
;;;192    			}
;;;193    			#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;194    
;;;195    			traceEVENT_GROUP_CREATE( pxEventBits );
;;;196    		}
;;;197    		else
;;;198    		{
;;;199    			traceEVENT_GROUP_CREATE_FAILED();
;;;200    		}
;;;201    
;;;202    		return ( EventGroupHandle_t ) pxEventBits;
000016  4620              MOV      r0,r4
;;;203    	}
000018  bd10              POP      {r4,pc}
;;;204    
                          ENDP


                          AREA ||i.xEventGroupGetBitsFromISR||, CODE, READONLY, ALIGN=1

                  xEventGroupGetBitsFromISR PROC
;;;513    
;;;514    EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
000000  b570              PUSH     {r4-r6,lr}
;;;515    {
000002  4601              MOV      r1,r0
;;;516    UBaseType_t uxSavedInterruptStatus;
;;;517    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000004  460b              MOV      r3,r1
;;;518    EventBits_t uxReturn;
;;;519    
;;;520    	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000006  bf00              NOP      
000008  2530              MOVS     r5,#0x30
00000a  f3ef8011          MRS      r0,BASEPRI
00000e  f3858811          MSR      BASEPRI,r5
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  4602              MOV      r2,r0
;;;521    	{
;;;522    		uxReturn = pxEventBits->uxEventBits;
00001e  681c              LDR      r4,[r3,#0]
;;;523    	}
;;;524    	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000020  4610              MOV      r0,r2
000022  f3808811          MSR      BASEPRI,r0
000026  bf00              NOP      
;;;525    
;;;526    	return uxReturn;
000028  4620              MOV      r0,r4
;;;527    }
00002a  bd70              POP      {r4-r6,pc}
;;;528    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSetBits||, CODE, READONLY, ALIGN=1

                  xEventGroupSetBits PROC
;;;529    
;;;530    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;531    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
;;;532    ListItem_t *pxListItem, *pxNext;
;;;533    ListItem_t const *pxListEnd;
;;;534    List_t *pxList;
;;;535    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;536    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
00000c  463c              MOV      r4,r7
;;;537    BaseType_t xMatchFound = pdFALSE;
00000e  9000              STR      r0,[sp,#0]
;;;538    
;;;539    	/* Check the user is not attempting to set the bits used by the kernel
;;;540    	itself. */
;;;541    	configASSERT( xEventGroup );
000010  b957              CBNZ     r7,|L9.40|
000012  bf00              NOP      
000014  2030              MOVS     r0,#0x30
000016  f3808811          MSR      BASEPRI,r0
00001a  f3bf8f4f          DSB      
00001e  f3bf8f6f          ISB      
000022  bf00              NOP      
000024  bf00              NOP      
                  |L9.38|
000026  e7fe              B        |L9.38|
                  |L9.40|
;;;542    	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000028  f008407f          AND      r0,r8,#0xff000000
00002c  b908              CBNZ     r0,|L9.50|
00002e  2001              MOVS     r0,#1
000030  e000              B        |L9.52|
                  |L9.50|
000032  2000              MOVS     r0,#0
                  |L9.52|
000034  b950              CBNZ     r0,|L9.76|
000036  bf00              NOP      
000038  2030              MOVS     r0,#0x30
00003a  f3808811          MSR      BASEPRI,r0
00003e  f3bf8f4f          DSB      
000042  f3bf8f6f          ISB      
000046  bf00              NOP      
000048  bf00              NOP      
                  |L9.74|
00004a  e7fe              B        |L9.74|
                  |L9.76|
;;;543    
;;;544    	pxList = &( pxEventBits->xTasksWaitingForBits );
00004c  f1040904          ADD      r9,r4,#4
;;;545    	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000050  f1090008          ADD      r0,r9,#8
000054  9002              STR      r0,[sp,#8]
;;;546    	vTaskSuspendAll();
000056  f7fffffe          BL       vTaskSuspendAll
;;;547    	{
;;;548    		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
;;;549    
;;;550    		pxListItem = listGET_HEAD_ENTRY( pxList );
00005a  f8d9600c          LDR      r6,[r9,#0xc]
;;;551    
;;;552    		/* Set the bits. */
;;;553    		pxEventBits->uxEventBits |= uxBitsToSet;
00005e  6820              LDR      r0,[r4,#0]
000060  ea400008          ORR      r0,r0,r8
000064  6020              STR      r0,[r4,#0]
;;;554    
;;;555    		/* See if the new bit value should unblock any tasks. */
;;;556    		while( pxListItem != pxListEnd )
000066  e026              B        |L9.182|
                  |L9.104|
;;;557    		{
;;;558    			pxNext = listGET_NEXT( pxListItem );
000068  f8d6b004          LDR      r11,[r6,#4]
;;;559    			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
00006c  6835              LDR      r5,[r6,#0]
;;;560    			xMatchFound = pdFALSE;
00006e  2000              MOVS     r0,#0
000070  9000              STR      r0,[sp,#0]
;;;561    
;;;562    			/* Split the bits waited for from the control bits. */
;;;563    			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
000072  f0054a7f          AND      r10,r5,#0xff000000
;;;564    			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
000076  f025457f          BIC      r5,r5,#0xff000000
;;;565    
;;;566    			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
00007a  f00a6080          AND      r0,r10,#0x4000000
00007e  b928              CBNZ     r0,|L9.140|
;;;567    			{
;;;568    				/* Just looking for single bit being set. */
;;;569    				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
000080  6820              LDR      r0,[r4,#0]
000082  4028              ANDS     r0,r0,r5
000084  b140              CBZ      r0,|L9.152|
;;;570    				{
;;;571    					xMatchFound = pdTRUE;
000086  2001              MOVS     r0,#1
000088  9000              STR      r0,[sp,#0]
00008a  e005              B        |L9.152|
                  |L9.140|
;;;572    				}
;;;573    				else
;;;574    				{
;;;575    					mtCOVERAGE_TEST_MARKER();
;;;576    				}
;;;577    			}
;;;578    			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
00008c  6820              LDR      r0,[r4,#0]
00008e  4028              ANDS     r0,r0,r5
000090  42a8              CMP      r0,r5
000092  d101              BNE      |L9.152|
;;;579    			{
;;;580    				/* All bits are set. */
;;;581    				xMatchFound = pdTRUE;
000094  2001              MOVS     r0,#1
000096  9000              STR      r0,[sp,#0]
                  |L9.152|
;;;582    			}
;;;583    			else
;;;584    			{
;;;585    				/* Need all bits to be set, but not all the bits were set. */
;;;586    			}
;;;587    
;;;588    			if( xMatchFound != pdFALSE )
000098  9800              LDR      r0,[sp,#0]
00009a  b158              CBZ      r0,|L9.180|
;;;589    			{
;;;590    				/* The bits match.  Should the bits be cleared on exit? */
;;;591    				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
00009c  f00a7080          AND      r0,r10,#0x1000000
0000a0  b110              CBZ      r0,|L9.168|
;;;592    				{
;;;593    					uxBitsToClear |= uxBitsWaitedFor;
0000a2  9801              LDR      r0,[sp,#4]
0000a4  4328              ORRS     r0,r0,r5
0000a6  9001              STR      r0,[sp,#4]
                  |L9.168|
;;;594    				}
;;;595    				else
;;;596    				{
;;;597    					mtCOVERAGE_TEST_MARKER();
;;;598    				}
;;;599    
;;;600    				/* Store the actual event flag value in the task's event list
;;;601    				item before removing the task from the event list.  The
;;;602    				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
;;;603    				that is was unblocked due to its required bits matching, rather
;;;604    				than because it timed out. */
;;;605    				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
0000a8  6820              LDR      r0,[r4,#0]
0000aa  f0407100          ORR      r1,r0,#0x2000000
0000ae  4630              MOV      r0,r6
0000b0  f7fffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L9.180|
;;;606    			}
;;;607    
;;;608    			/* Move onto the next list item.  Note pxListItem->pxNext is not
;;;609    			used here as the list item may have been removed from the event list
;;;610    			and inserted into the ready/pending reading list. */
;;;611    			pxListItem = pxNext;
0000b4  465e              MOV      r6,r11
                  |L9.182|
0000b6  9802              LDR      r0,[sp,#8]            ;556
0000b8  4286              CMP      r6,r0                 ;556
0000ba  d1d5              BNE      |L9.104|
;;;612    		}
;;;613    
;;;614    		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
;;;615    		bit was set in the control word. */
;;;616    		pxEventBits->uxEventBits &= ~uxBitsToClear;
0000bc  6820              LDR      r0,[r4,#0]
0000be  9901              LDR      r1,[sp,#4]
0000c0  4388              BICS     r0,r0,r1
0000c2  6020              STR      r0,[r4,#0]
;;;617    	}
;;;618    	( void ) xTaskResumeAll();
0000c4  f7fffffe          BL       xTaskResumeAll
;;;619    
;;;620    	return pxEventBits->uxEventBits;
0000c8  6820              LDR      r0,[r4,#0]
;;;621    }
0000ca  e8bd8ffe          POP      {r1-r11,pc}
;;;622    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSync||, CODE, READONLY, ALIGN=2

                  xEventGroupSync PROC
;;;207    
;;;208    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;209    {
000004  4683              MOV      r11,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
;;;210    EventBits_t uxOriginalBitValue, uxReturn;
;;;211    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
00000c  465d              MOV      r5,r11
;;;212    BaseType_t xAlreadyYielded;
;;;213    BaseType_t xTimeoutOccurred = pdFALSE;
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
;;;214    
;;;215    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000012  f004407f          AND      r0,r4,#0xff000000
000016  b908              CBNZ     r0,|L10.28|
000018  2001              MOVS     r0,#1
00001a  e000              B        |L10.30|
                  |L10.28|
00001c  2000              MOVS     r0,#0
                  |L10.30|
00001e  b950              CBNZ     r0,|L10.54|
000020  bf00              NOP      
000022  2030              MOVS     r0,#0x30
000024  f3808811          MSR      BASEPRI,r0
000028  f3bf8f4f          DSB      
00002c  f3bf8f6f          ISB      
000030  bf00              NOP      
000032  bf00              NOP      
                  |L10.52|
000034  e7fe              B        |L10.52|
                  |L10.54|
;;;216    	configASSERT( uxBitsToWaitFor != 0 );
000036  b10c              CBZ      r4,|L10.60|
000038  2001              MOVS     r0,#1
00003a  e000              B        |L10.62|
                  |L10.60|
00003c  2000              MOVS     r0,#0
                  |L10.62|
00003e  b950              CBNZ     r0,|L10.86|
000040  bf00              NOP      
000042  2030              MOVS     r0,#0x30
000044  f3808811          MSR      BASEPRI,r0
000048  f3bf8f4f          DSB      
00004c  f3bf8f6f          ISB      
000050  bf00              NOP      
000052  bf00              NOP      
                  |L10.84|
000054  e7fe              B        |L10.84|
                  |L10.86|
;;;217    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;218    	{
;;;219    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
000056  f7fffffe          BL       xTaskGetSchedulerState
00005a  b900              CBNZ     r0,|L10.94|
00005c  b90f              CBNZ     r7,|L10.98|
                  |L10.94|
00005e  2001              MOVS     r0,#1
000060  e000              B        |L10.100|
                  |L10.98|
000062  2000              MOVS     r0,#0
                  |L10.100|
000064  b950              CBNZ     r0,|L10.124|
000066  bf00              NOP      
000068  2030              MOVS     r0,#0x30
00006a  f3808811          MSR      BASEPRI,r0
00006e  f3bf8f4f          DSB      
000072  f3bf8f6f          ISB      
000076  bf00              NOP      
000078  bf00              NOP      
                  |L10.122|
00007a  e7fe              B        |L10.122|
                  |L10.124|
;;;220    	}
;;;221    	#endif
;;;222    
;;;223    	vTaskSuspendAll();
00007c  f7fffffe          BL       vTaskSuspendAll
;;;224    	{
;;;225    		uxOriginalBitValue = pxEventBits->uxEventBits;
000080  f8d59000          LDR      r9,[r5,#0]
;;;226    
;;;227    		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
000084  4641              MOV      r1,r8
000086  4658              MOV      r0,r11
000088  f7fffffe          BL       xEventGroupSetBits
;;;228    
;;;229    		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
00008c  ea490008          ORR      r0,r9,r8
000090  4020              ANDS     r0,r0,r4
000092  42a0              CMP      r0,r4
000094  d106              BNE      |L10.164|
;;;230    		{
;;;231    			/* All the rendezvous bits are now set - no need to block. */
;;;232    			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
000096  ea490608          ORR      r6,r9,r8
;;;233    
;;;234    			/* Rendezvous always clear the bits.  They will have been cleared
;;;235    			already unless this is the only task in the rendezvous. */
;;;236    			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
00009a  6828              LDR      r0,[r5,#0]
00009c  43a0              BICS     r0,r0,r4
00009e  6028              STR      r0,[r5,#0]
;;;237    
;;;238    			xTicksToWait = 0;
0000a0  2700              MOVS     r7,#0
0000a2  e009              B        |L10.184|
                  |L10.164|
;;;239    		}
;;;240    		else
;;;241    		{
;;;242    			if( xTicksToWait != ( TickType_t ) 0 )
0000a4  b13f              CBZ      r7,|L10.182|
;;;243    			{
;;;244    				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
;;;245    
;;;246    				/* Store the bits that the calling task is waiting for in the
;;;247    				task's event list item so the kernel knows when a match is
;;;248    				found.  Then enter the blocked state. */
;;;249    				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
0000a6  f04461a0          ORR      r1,r4,#0x5000000
0000aa  463a              MOV      r2,r7
0000ac  1d28              ADDS     r0,r5,#4
0000ae  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;250    
;;;251    				/* This assignment is obsolete as uxReturn will get set after
;;;252    				the task unblocks, but some compilers mistakenly generate a
;;;253    				warning about uxReturn being returned without being set if the
;;;254    				assignment is omitted. */
;;;255    				uxReturn = 0;
0000b2  2600              MOVS     r6,#0
0000b4  e000              B        |L10.184|
                  |L10.182|
;;;256    			}
;;;257    			else
;;;258    			{
;;;259    				/* The rendezvous bits were not set, but no block time was
;;;260    				specified - just return the current event bit value. */
;;;261    				uxReturn = pxEventBits->uxEventBits;
0000b6  682e              LDR      r6,[r5,#0]
                  |L10.184|
;;;262    			}
;;;263    		}
;;;264    	}
;;;265    	xAlreadyYielded = xTaskResumeAll();
0000b8  f7fffffe          BL       xTaskResumeAll
0000bc  4682              MOV      r10,r0
;;;266    
;;;267    	if( xTicksToWait != ( TickType_t ) 0 )
0000be  b307              CBZ      r7,|L10.258|
;;;268    	{
;;;269    		if( xAlreadyYielded == pdFALSE )
0000c0  f1ba0f00          CMP      r10,#0
0000c4  d107              BNE      |L10.214|
;;;270    		{
;;;271    			portYIELD_WITHIN_API();
0000c6  f04f5080          MOV      r0,#0x10000000
0000ca  490f              LDR      r1,|L10.264|
0000cc  6008              STR      r0,[r1,#0]
0000ce  f3bf8f4f          DSB      
0000d2  f3bf8f6f          ISB      
                  |L10.214|
;;;272    		}
;;;273    		else
;;;274    		{
;;;275    			mtCOVERAGE_TEST_MARKER();
;;;276    		}
;;;277    
;;;278    		/* The task blocked to wait for its required bits to be set - at this
;;;279    		point either the required bits were set or the block time expired.  If
;;;280    		the required bits were set they will have been stored in the task's
;;;281    		event list item, and they should now be retrieved then cleared. */
;;;282    		uxReturn = uxTaskResetEventItemValue();
0000d6  f7fffffe          BL       uxTaskResetEventItemValue
0000da  4606              MOV      r6,r0
;;;283    
;;;284    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
0000dc  f0067000          AND      r0,r6,#0x2000000
0000e0  b968              CBNZ     r0,|L10.254|
;;;285    		{
;;;286    			/* The task timed out, just return the current event bit value. */
;;;287    			taskENTER_CRITICAL();
0000e2  f7fffffe          BL       vPortEnterCritical
;;;288    			{
;;;289    				uxReturn = pxEventBits->uxEventBits;
0000e6  682e              LDR      r6,[r5,#0]
;;;290    
;;;291    				/* Although the task got here because it timed out before the
;;;292    				bits it was waiting for were set, it is possible that since it
;;;293    				unblocked another task has set the bits.  If this is the case
;;;294    				then it needs to clear the bits before exiting. */
;;;295    				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
0000e8  ea060004          AND      r0,r6,r4
0000ec  42a0              CMP      r0,r4
0000ee  d102              BNE      |L10.246|
;;;296    				{
;;;297    					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
0000f0  6828              LDR      r0,[r5,#0]
0000f2  43a0              BICS     r0,r0,r4
0000f4  6028              STR      r0,[r5,#0]
                  |L10.246|
;;;298    				}
;;;299    				else
;;;300    				{
;;;301    					mtCOVERAGE_TEST_MARKER();
;;;302    				}
;;;303    			}
;;;304    			taskEXIT_CRITICAL();
0000f6  f7fffffe          BL       vPortExitCritical
;;;305    
;;;306    			xTimeoutOccurred = pdTRUE;
0000fa  2001              MOVS     r0,#1
0000fc  9000              STR      r0,[sp,#0]
                  |L10.254|
;;;307    		}
;;;308    		else
;;;309    		{
;;;310    			/* The task unblocked because the bits were set. */
;;;311    		}
;;;312    
;;;313    		/* Control bits might be set as the task had blocked should not be
;;;314    		returned. */
;;;315    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
0000fe  f026467f          BIC      r6,r6,#0xff000000
                  |L10.258|
;;;316    	}
;;;317    
;;;318    	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
;;;319    
;;;320    	return uxReturn;
000102  4630              MOV      r0,r6
;;;321    }
000104  e8bd8ff8          POP      {r3-r11,pc}
;;;322    /*-----------------------------------------------------------*/
                          ENDP

                  |L10.264|
                          DCD      0xe000ed04

                          AREA ||i.xEventGroupWaitBits||, CODE, READONLY, ALIGN=2

                  xEventGroupWaitBits PROC
;;;323    
;;;324    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;325    {
000004  b083              SUB      sp,sp,#0xc
000006  4681              MOV      r9,r0
000008  460d              MOV      r5,r1
00000a  4617              MOV      r7,r2
00000c  f8dd8040          LDR      r8,[sp,#0x40]
;;;326    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000010  464c              MOV      r4,r9
;;;327    EventBits_t uxReturn, uxControlBits = 0;
000012  f04f0a00          MOV      r10,#0
;;;328    BaseType_t xWaitConditionMet, xAlreadyYielded;
;;;329    BaseType_t xTimeoutOccurred = pdFALSE;
000016  2000              MOVS     r0,#0
000018  9001              STR      r0,[sp,#4]
;;;330    
;;;331    	/* Check the user is not attempting to wait on the bits used by the kernel
;;;332    	itself, and that at least one bit is being requested. */
;;;333    	configASSERT( xEventGroup );
00001a  f1b90f00          CMP      r9,#0
00001e  d10a              BNE      |L11.54|
000020  bf00              NOP      
000022  2030              MOVS     r0,#0x30
000024  f3808811          MSR      BASEPRI,r0
000028  f3bf8f4f          DSB      
00002c  f3bf8f6f          ISB      
000030  bf00              NOP      
000032  bf00              NOP      
                  |L11.52|
000034  e7fe              B        |L11.52|
                  |L11.54|
;;;334    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000036  f005407f          AND      r0,r5,#0xff000000
00003a  b908              CBNZ     r0,|L11.64|
00003c  2001              MOVS     r0,#1
00003e  e000              B        |L11.66|
                  |L11.64|
000040  2000              MOVS     r0,#0
                  |L11.66|
000042  b950              CBNZ     r0,|L11.90|
000044  bf00              NOP      
000046  2030              MOVS     r0,#0x30
000048  f3808811          MSR      BASEPRI,r0
00004c  f3bf8f4f          DSB      
000050  f3bf8f6f          ISB      
000054  bf00              NOP      
000056  bf00              NOP      
                  |L11.88|
000058  e7fe              B        |L11.88|
                  |L11.90|
;;;335    	configASSERT( uxBitsToWaitFor != 0 );
00005a  b10d              CBZ      r5,|L11.96|
00005c  2001              MOVS     r0,#1
00005e  e000              B        |L11.98|
                  |L11.96|
000060  2000              MOVS     r0,#0
                  |L11.98|
000062  b950              CBNZ     r0,|L11.122|
000064  bf00              NOP      
000066  2030              MOVS     r0,#0x30
000068  f3808811          MSR      BASEPRI,r0
00006c  f3bf8f4f          DSB      
000070  f3bf8f6f          ISB      
000074  bf00              NOP      
000076  bf00              NOP      
                  |L11.120|
000078  e7fe              B        |L11.120|
                  |L11.122|
;;;336    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;337    	{
;;;338    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
00007a  f7fffffe          BL       xTaskGetSchedulerState
00007e  b910              CBNZ     r0,|L11.134|
000080  f1b80f00          CMP      r8,#0
000084  d101              BNE      |L11.138|
                  |L11.134|
000086  2001              MOVS     r0,#1
000088  e000              B        |L11.140|
                  |L11.138|
00008a  2000              MOVS     r0,#0
                  |L11.140|
00008c  b950              CBNZ     r0,|L11.164|
00008e  bf00              NOP      
000090  2030              MOVS     r0,#0x30
000092  f3808811          MSR      BASEPRI,r0
000096  f3bf8f4f          DSB      
00009a  f3bf8f6f          ISB      
00009e  bf00              NOP      
0000a0  bf00              NOP      
                  |L11.162|
0000a2  e7fe              B        |L11.162|
                  |L11.164|
;;;339    	}
;;;340    	#endif
;;;341    
;;;342    	vTaskSuspendAll();
0000a4  f7fffffe          BL       vTaskSuspendAll
;;;343    	{
;;;344    		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
0000a8  6820              LDR      r0,[r4,#0]
0000aa  9000              STR      r0,[sp,#0]
;;;345    
;;;346    		/* Check to see if the wait condition is already met or not. */
;;;347    		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
0000ac  4629              MOV      r1,r5
0000ae  9a06              LDR      r2,[sp,#0x18]
0000b0  9800              LDR      r0,[sp,#0]
0000b2  f7fffffe          BL       prvTestWaitCondition
0000b6  9002              STR      r0,[sp,#8]
;;;348    
;;;349    		if( xWaitConditionMet != pdFALSE )
0000b8  9802              LDR      r0,[sp,#8]
0000ba  b138              CBZ      r0,|L11.204|
;;;350    		{
;;;351    			/* The wait condition has already been met so there is no need to
;;;352    			block. */
;;;353    			uxReturn = uxCurrentEventBits;
0000bc  9e00              LDR      r6,[sp,#0]
;;;354    			xTicksToWait = ( TickType_t ) 0;
0000be  f04f0800          MOV      r8,#0
;;;355    
;;;356    			/* Clear the wait bits if requested to do so. */
;;;357    			if( xClearOnExit != pdFALSE )
0000c2  b1b7              CBZ      r7,|L11.242|
;;;358    			{
;;;359    				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
0000c4  6820              LDR      r0,[r4,#0]
0000c6  43a8              BICS     r0,r0,r5
0000c8  6020              STR      r0,[r4,#0]
0000ca  e012              B        |L11.242|
                  |L11.204|
;;;360    			}
;;;361    			else
;;;362    			{
;;;363    				mtCOVERAGE_TEST_MARKER();
;;;364    			}
;;;365    		}
;;;366    		else if( xTicksToWait == ( TickType_t ) 0 )
0000cc  f1b80f00          CMP      r8,#0
0000d0  d101              BNE      |L11.214|
;;;367    		{
;;;368    			/* The wait condition has not been met, but no block time was
;;;369    			specified, so just return the current value. */
;;;370    			uxReturn = uxCurrentEventBits;
0000d2  9e00              LDR      r6,[sp,#0]
0000d4  e00d              B        |L11.242|
                  |L11.214|
;;;371    		}
;;;372    		else
;;;373    		{
;;;374    			/* The task is going to block to wait for its required bits to be
;;;375    			set.  uxControlBits are used to remember the specified behaviour of
;;;376    			this call to xEventGroupWaitBits() - for use when the event bits
;;;377    			unblock the task. */
;;;378    			if( xClearOnExit != pdFALSE )
0000d6  b10f              CBZ      r7,|L11.220|
;;;379    			{
;;;380    				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
0000d8  f04a7a80          ORR      r10,r10,#0x1000000
                  |L11.220|
;;;381    			}
;;;382    			else
;;;383    			{
;;;384    				mtCOVERAGE_TEST_MARKER();
;;;385    			}
;;;386    
;;;387    			if( xWaitForAllBits != pdFALSE )
0000dc  9806              LDR      r0,[sp,#0x18]
0000de  b108              CBZ      r0,|L11.228|
;;;388    			{
;;;389    				uxControlBits |= eventWAIT_FOR_ALL_BITS;
0000e0  f04a6a80          ORR      r10,r10,#0x4000000
                  |L11.228|
;;;390    			}
;;;391    			else
;;;392    			{
;;;393    				mtCOVERAGE_TEST_MARKER();
;;;394    			}
;;;395    
;;;396    			/* Store the bits that the calling task is waiting for in the
;;;397    			task's event list item so the kernel knows when a match is
;;;398    			found.  Then enter the blocked state. */
;;;399    			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
0000e4  ea45010a          ORR      r1,r5,r10
0000e8  4642              MOV      r2,r8
0000ea  1d20              ADDS     r0,r4,#4
0000ec  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;400    
;;;401    			/* This is obsolete as it will get set after the task unblocks, but
;;;402    			some compilers mistakenly generate a warning about the variable
;;;403    			being returned without being set if it is not done. */
;;;404    			uxReturn = 0;
0000f0  2600              MOVS     r6,#0
                  |L11.242|
;;;405    
;;;406    			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
;;;407    		}
;;;408    	}
;;;409    	xAlreadyYielded = xTaskResumeAll();
0000f2  f7fffffe          BL       xTaskResumeAll
0000f6  4683              MOV      r11,r0
;;;410    
;;;411    	if( xTicksToWait != ( TickType_t ) 0 )
0000f8  f1b80f00          CMP      r8,#0
0000fc  d023              BEQ      |L11.326|
;;;412    	{
;;;413    		if( xAlreadyYielded == pdFALSE )
0000fe  f1bb0f00          CMP      r11,#0
000102  d107              BNE      |L11.276|
;;;414    		{
;;;415    			portYIELD_WITHIN_API();
000104  f04f5080          MOV      r0,#0x10000000
000108  4911              LDR      r1,|L11.336|
00010a  6008              STR      r0,[r1,#0]
00010c  f3bf8f4f          DSB      
000110  f3bf8f6f          ISB      
                  |L11.276|
;;;416    		}
;;;417    		else
;;;418    		{
;;;419    			mtCOVERAGE_TEST_MARKER();
;;;420    		}
;;;421    
;;;422    		/* The task blocked to wait for its required bits to be set - at this
;;;423    		point either the required bits were set or the block time expired.  If
;;;424    		the required bits were set they will have been stored in the task's
;;;425    		event list item, and they should now be retrieved then cleared. */
;;;426    		uxReturn = uxTaskResetEventItemValue();
000114  f7fffffe          BL       uxTaskResetEventItemValue
000118  4606              MOV      r6,r0
;;;427    
;;;428    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
00011a  f0067000          AND      r0,r6,#0x2000000
00011e  b980              CBNZ     r0,|L11.322|
;;;429    		{
;;;430    			taskENTER_CRITICAL();
000120  f7fffffe          BL       vPortEnterCritical
;;;431    			{
;;;432    				/* The task timed out, just return the current event bit value. */
;;;433    				uxReturn = pxEventBits->uxEventBits;
000124  6826              LDR      r6,[r4,#0]
;;;434    
;;;435    				/* It is possible that the event bits were updated between this
;;;436    				task leaving the Blocked state and running again. */
;;;437    				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
000126  4629              MOV      r1,r5
000128  4630              MOV      r0,r6
00012a  9a06              LDR      r2,[sp,#0x18]
00012c  f7fffffe          BL       prvTestWaitCondition
000130  b118              CBZ      r0,|L11.314|
;;;438    				{
;;;439    					if( xClearOnExit != pdFALSE )
000132  b117              CBZ      r7,|L11.314|
;;;440    					{
;;;441    						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
000134  6820              LDR      r0,[r4,#0]
000136  43a8              BICS     r0,r0,r5
000138  6020              STR      r0,[r4,#0]
                  |L11.314|
;;;442    					}
;;;443    					else
;;;444    					{
;;;445    						mtCOVERAGE_TEST_MARKER();
;;;446    					}
;;;447    				}
;;;448    				else
;;;449    				{
;;;450    					mtCOVERAGE_TEST_MARKER();
;;;451    				}
;;;452    			}
;;;453    			taskEXIT_CRITICAL();
00013a  f7fffffe          BL       vPortExitCritical
;;;454    
;;;455    			/* Prevent compiler warnings when trace macros are not used. */
;;;456    			xTimeoutOccurred = pdFALSE;
00013e  2000              MOVS     r0,#0
000140  9001              STR      r0,[sp,#4]
                  |L11.322|
;;;457    		}
;;;458    		else
;;;459    		{
;;;460    			/* The task unblocked because the bits were set. */
;;;461    		}
;;;462    
;;;463    		/* The task blocked so control bits may have been set. */
;;;464    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
000142  f026467f          BIC      r6,r6,#0xff000000
                  |L11.326|
;;;465    	}
;;;466    	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
;;;467    
;;;468    	return uxReturn;
000146  4630              MOV      r0,r6
;;;469    }
000148  b007              ADD      sp,sp,#0x1c
00014a  e8bd8ff0          POP      {r4-r11,pc}
;;;470    /*-----------------------------------------------------------*/
                          ENDP

00014e  0000              DCW      0x0000
                  |L11.336|
                          DCD      0xe000ed04
